// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiTokenScopes = "apiToken.Scopes"
)

// Defines values for BillingV1CatalogCatalogItemPriceResourcePeriodUnit.
const (
	Day   BillingV1CatalogCatalogItemPriceResourcePeriodUnit = "day"
	Month BillingV1CatalogCatalogItemPriceResourcePeriodUnit = "month"
	None  BillingV1CatalogCatalogItemPriceResourcePeriodUnit = "none"
	Week  BillingV1CatalogCatalogItemPriceResourcePeriodUnit = "week"
	Year  BillingV1CatalogCatalogItemPriceResourcePeriodUnit = "year"
)

// Defines values for BillingV1OrderOrderResourceStatus.
const (
	BillingV1OrderOrderResourceStatusAwaitingPayment  BillingV1OrderOrderResourceStatus = "awaiting_payment"
	BillingV1OrderOrderResourceStatusCancelled        BillingV1OrderOrderResourceStatus = "cancelled"
	BillingV1OrderOrderResourceStatusCompleted        BillingV1OrderOrderResourceStatus = "completed"
	BillingV1OrderOrderResourceStatusFailed           BillingV1OrderOrderResourceStatus = "failed"
	BillingV1OrderOrderResourceStatusFraudRefund      BillingV1OrderOrderResourceStatus = "fraud_refund"
	BillingV1OrderOrderResourceStatusPaymentInitiated BillingV1OrderOrderResourceStatus = "payment_initiated"
	BillingV1OrderOrderResourceStatusPending          BillingV1OrderOrderResourceStatus = "pending"
	BillingV1OrderOrderResourceStatusProcessing       BillingV1OrderOrderResourceStatus = "processing"
	BillingV1OrderOrderResourceStatusRefunded         BillingV1OrderOrderResourceStatus = "refunded"
)

// Defines values for BillingV1SubscriptionCancelRequestCancelOption.
const (
	Immediately BillingV1SubscriptionCancelRequestCancelOption = "immediately"
)

// Defines values for BillingV1SubscriptionCancelRequestReasonCode.
const (
	Other BillingV1SubscriptionCancelRequestReasonCode = "other"
)

// Defines values for BillingV1SubscriptionSubscriptionResourceStatus.
const (
	BillingV1SubscriptionSubscriptionResourceStatusActive      BillingV1SubscriptionSubscriptionResourceStatus = "active"
	BillingV1SubscriptionSubscriptionResourceStatusCancelled   BillingV1SubscriptionSubscriptionResourceStatus = "cancelled"
	BillingV1SubscriptionSubscriptionResourceStatusFuture      BillingV1SubscriptionSubscriptionResourceStatus = "future"
	BillingV1SubscriptionSubscriptionResourceStatusInTrial     BillingV1SubscriptionSubscriptionResourceStatus = "in_trial"
	BillingV1SubscriptionSubscriptionResourceStatusNotRenewing BillingV1SubscriptionSubscriptionResourceStatus = "not_renewing"
	BillingV1SubscriptionSubscriptionResourceStatusPaused      BillingV1SubscriptionSubscriptionResourceStatus = "paused"
	BillingV1SubscriptionSubscriptionResourceStatusTransferred BillingV1SubscriptionSubscriptionResourceStatus = "transferred"
)

// Defines values for DNSV1ZoneDestroyRequestFiltersType.
const (
	DNSV1ZoneDestroyRequestFiltersTypeA     DNSV1ZoneDestroyRequestFiltersType = "A"
	DNSV1ZoneDestroyRequestFiltersTypeAAAA  DNSV1ZoneDestroyRequestFiltersType = "AAAA"
	DNSV1ZoneDestroyRequestFiltersTypeALIAS DNSV1ZoneDestroyRequestFiltersType = "ALIAS"
	DNSV1ZoneDestroyRequestFiltersTypeCAA   DNSV1ZoneDestroyRequestFiltersType = "CAA"
	DNSV1ZoneDestroyRequestFiltersTypeCNAME DNSV1ZoneDestroyRequestFiltersType = "CNAME"
	DNSV1ZoneDestroyRequestFiltersTypeMX    DNSV1ZoneDestroyRequestFiltersType = "MX"
	DNSV1ZoneDestroyRequestFiltersTypeNS    DNSV1ZoneDestroyRequestFiltersType = "NS"
	DNSV1ZoneDestroyRequestFiltersTypeSOA   DNSV1ZoneDestroyRequestFiltersType = "SOA"
	DNSV1ZoneDestroyRequestFiltersTypeSRV   DNSV1ZoneDestroyRequestFiltersType = "SRV"
	DNSV1ZoneDestroyRequestFiltersTypeTXT   DNSV1ZoneDestroyRequestFiltersType = "TXT"
)

// Defines values for DNSV1ZoneRecordResourceType.
const (
	DNSV1ZoneRecordResourceTypeA     DNSV1ZoneRecordResourceType = "A"
	DNSV1ZoneRecordResourceTypeAAAA  DNSV1ZoneRecordResourceType = "AAAA"
	DNSV1ZoneRecordResourceTypeALIAS DNSV1ZoneRecordResourceType = "ALIAS"
	DNSV1ZoneRecordResourceTypeCAA   DNSV1ZoneRecordResourceType = "CAA"
	DNSV1ZoneRecordResourceTypeCNAME DNSV1ZoneRecordResourceType = "CNAME"
	DNSV1ZoneRecordResourceTypeMX    DNSV1ZoneRecordResourceType = "MX"
	DNSV1ZoneRecordResourceTypeNS    DNSV1ZoneRecordResourceType = "NS"
	DNSV1ZoneRecordResourceTypeSOA   DNSV1ZoneRecordResourceType = "SOA"
	DNSV1ZoneRecordResourceTypeSRV   DNSV1ZoneRecordResourceType = "SRV"
	DNSV1ZoneRecordResourceTypeTXT   DNSV1ZoneRecordResourceType = "TXT"
)

// Defines values for DNSV1ZoneUpdateRequestZoneType.
const (
	A     DNSV1ZoneUpdateRequestZoneType = "A"
	AAAA  DNSV1ZoneUpdateRequestZoneType = "AAAA"
	ALIAS DNSV1ZoneUpdateRequestZoneType = "ALIAS"
	CAA   DNSV1ZoneUpdateRequestZoneType = "CAA"
	CNAME DNSV1ZoneUpdateRequestZoneType = "CNAME"
	MX    DNSV1ZoneUpdateRequestZoneType = "MX"
	NS    DNSV1ZoneUpdateRequestZoneType = "NS"
	SOA   DNSV1ZoneUpdateRequestZoneType = "SOA"
	SRV   DNSV1ZoneUpdateRequestZoneType = "SRV"
	TXT   DNSV1ZoneUpdateRequestZoneType = "TXT"
)

// Defines values for DomainsV1DomainDomainExtendedResourceStatus.
const (
	DomainsV1DomainDomainExtendedResourceStatusActive              DomainsV1DomainDomainExtendedResourceStatus = "active"
	DomainsV1DomainDomainExtendedResourceStatusExpired             DomainsV1DomainDomainExtendedResourceStatus = "expired"
	DomainsV1DomainDomainExtendedResourceStatusPendingSetup        DomainsV1DomainDomainExtendedResourceStatus = "pending_setup"
	DomainsV1DomainDomainExtendedResourceStatusPendingVerification DomainsV1DomainDomainExtendedResourceStatus = "pending_verification"
	DomainsV1DomainDomainExtendedResourceStatusRequested           DomainsV1DomainDomainExtendedResourceStatus = "requested"
)

// Defines values for DomainsV1DomainDomainResourceStatus.
const (
	DomainsV1DomainDomainResourceStatusActive              DomainsV1DomainDomainResourceStatus = "active"
	DomainsV1DomainDomainResourceStatusExpired             DomainsV1DomainDomainResourceStatus = "expired"
	DomainsV1DomainDomainResourceStatusPendingSetup        DomainsV1DomainDomainResourceStatus = "pending_setup"
	DomainsV1DomainDomainResourceStatusPendingVerification DomainsV1DomainDomainResourceStatus = "pending_verification"
	DomainsV1DomainDomainResourceStatusRequested           DomainsV1DomainDomainResourceStatus = "requested"
)

// Defines values for DomainsV1DomainDomainResourceType.
const (
	DomainsV1DomainDomainResourceTypeDomain     DomainsV1DomainDomainResourceType = "domain"
	DomainsV1DomainDomainResourceTypeFreeDomain DomainsV1DomainDomainResourceType = "free_domain"
)

// Defines values for DomainsV1ForwardingForwardingResourceRedirectType.
const (
	DomainsV1ForwardingForwardingResourceRedirectTypeN301 DomainsV1ForwardingForwardingResourceRedirectType = "301"
	DomainsV1ForwardingForwardingResourceRedirectTypeN302 DomainsV1ForwardingForwardingResourceRedirectType = "302"
)

// Defines values for DomainsV1ForwardingStoreRequestRedirectType.
const (
	DomainsV1ForwardingStoreRequestRedirectTypeN301 DomainsV1ForwardingStoreRequestRedirectType = "301"
	DomainsV1ForwardingStoreRequestRedirectTypeN302 DomainsV1ForwardingStoreRequestRedirectType = "302"
)

// Defines values for DomainsV1WHOISProfileResourceEntityType.
const (
	DomainsV1WHOISProfileResourceEntityTypeIndividual   DomainsV1WHOISProfileResourceEntityType = "individual"
	DomainsV1WHOISProfileResourceEntityTypeOrganization DomainsV1WHOISProfileResourceEntityType = "organization"
)

// Defines values for DomainsV1WHOISStoreRequestEntityType.
const (
	DomainsV1WHOISStoreRequestEntityTypeIndividual   DomainsV1WHOISStoreRequestEntityType = "individual"
	DomainsV1WHOISStoreRequestEntityTypeOrganization DomainsV1WHOISStoreRequestEntityType = "organization"
)

// Defines values for VPSV1ActionActionResourceState.
const (
	VPSV1ActionActionResourceStateCreated VPSV1ActionActionResourceState = "created"
	VPSV1ActionActionResourceStateDelayed VPSV1ActionActionResourceState = "delayed"
	VPSV1ActionActionResourceStateError   VPSV1ActionActionResourceState = "error"
	VPSV1ActionActionResourceStateSent    VPSV1ActionActionResourceState = "sent"
	VPSV1ActionActionResourceStateSuccess VPSV1ActionActionResourceState = "success"
)

// Defines values for VPSV1FirewallFirewallRuleResourceAction.
const (
	Accept VPSV1FirewallFirewallRuleResourceAction = "accept"
	Drop   VPSV1FirewallFirewallRuleResourceAction = "drop"
)

// Defines values for VPSV1FirewallFirewallRuleResourceProtocol.
const (
	VPSV1FirewallFirewallRuleResourceProtocolAH         VPSV1FirewallFirewallRuleResourceProtocol = "AH"
	VPSV1FirewallFirewallRuleResourceProtocolAny        VPSV1FirewallFirewallRuleResourceProtocol = "any"
	VPSV1FirewallFirewallRuleResourceProtocolESP        VPSV1FirewallFirewallRuleResourceProtocol = "ESP"
	VPSV1FirewallFirewallRuleResourceProtocolGRE        VPSV1FirewallFirewallRuleResourceProtocol = "GRE"
	VPSV1FirewallFirewallRuleResourceProtocolHTTP       VPSV1FirewallFirewallRuleResourceProtocol = "HTTP"
	VPSV1FirewallFirewallRuleResourceProtocolHTTPS      VPSV1FirewallFirewallRuleResourceProtocol = "HTTPS"
	VPSV1FirewallFirewallRuleResourceProtocolICMP       VPSV1FirewallFirewallRuleResourceProtocol = "ICMP"
	VPSV1FirewallFirewallRuleResourceProtocolICMPv6     VPSV1FirewallFirewallRuleResourceProtocol = "ICMPv6"
	VPSV1FirewallFirewallRuleResourceProtocolMySQL      VPSV1FirewallFirewallRuleResourceProtocol = "MySQL"
	VPSV1FirewallFirewallRuleResourceProtocolPostgreSQL VPSV1FirewallFirewallRuleResourceProtocol = "PostgreSQL"
	VPSV1FirewallFirewallRuleResourceProtocolSSH        VPSV1FirewallFirewallRuleResourceProtocol = "SSH"
	VPSV1FirewallFirewallRuleResourceProtocolTCP        VPSV1FirewallFirewallRuleResourceProtocol = "TCP"
	VPSV1FirewallFirewallRuleResourceProtocolUDP        VPSV1FirewallFirewallRuleResourceProtocol = "UDP"
)

// Defines values for VPSV1FirewallRulesStoreRequestProtocol.
const (
	VPSV1FirewallRulesStoreRequestProtocolAH         VPSV1FirewallRulesStoreRequestProtocol = "AH"
	VPSV1FirewallRulesStoreRequestProtocolAny        VPSV1FirewallRulesStoreRequestProtocol = "any"
	VPSV1FirewallRulesStoreRequestProtocolESP        VPSV1FirewallRulesStoreRequestProtocol = "ESP"
	VPSV1FirewallRulesStoreRequestProtocolGRE        VPSV1FirewallRulesStoreRequestProtocol = "GRE"
	VPSV1FirewallRulesStoreRequestProtocolHTTP       VPSV1FirewallRulesStoreRequestProtocol = "HTTP"
	VPSV1FirewallRulesStoreRequestProtocolHTTPS      VPSV1FirewallRulesStoreRequestProtocol = "HTTPS"
	VPSV1FirewallRulesStoreRequestProtocolICMP       VPSV1FirewallRulesStoreRequestProtocol = "ICMP"
	VPSV1FirewallRulesStoreRequestProtocolICMPv6     VPSV1FirewallRulesStoreRequestProtocol = "ICMPv6"
	VPSV1FirewallRulesStoreRequestProtocolMySQL      VPSV1FirewallRulesStoreRequestProtocol = "MySQL"
	VPSV1FirewallRulesStoreRequestProtocolPostgreSQL VPSV1FirewallRulesStoreRequestProtocol = "PostgreSQL"
	VPSV1FirewallRulesStoreRequestProtocolSSH        VPSV1FirewallRulesStoreRequestProtocol = "SSH"
	VPSV1FirewallRulesStoreRequestProtocolTCP        VPSV1FirewallRulesStoreRequestProtocol = "TCP"
	VPSV1FirewallRulesStoreRequestProtocolUDP        VPSV1FirewallRulesStoreRequestProtocol = "UDP"
)

// Defines values for VPSV1FirewallRulesStoreRequestSource.
const (
	Any    VPSV1FirewallRulesStoreRequestSource = "any"
	Custom VPSV1FirewallRulesStoreRequestSource = "custom"
)

// Defines values for VPSV1VirtualMachineVirtualMachineResourceActionsLock.
const (
	Locked   VPSV1VirtualMachineVirtualMachineResourceActionsLock = "locked"
	Unlocked VPSV1VirtualMachineVirtualMachineResourceActionsLock = "unlocked"
)

// Defines values for VPSV1VirtualMachineVirtualMachineResourceState.
const (
	VPSV1VirtualMachineVirtualMachineResourceStateCreating         VPSV1VirtualMachineVirtualMachineResourceState = "creating"
	VPSV1VirtualMachineVirtualMachineResourceStateDestroyed        VPSV1VirtualMachineVirtualMachineResourceState = "destroyed"
	VPSV1VirtualMachineVirtualMachineResourceStateDestroying       VPSV1VirtualMachineVirtualMachineResourceState = "destroying"
	VPSV1VirtualMachineVirtualMachineResourceStateError            VPSV1VirtualMachineVirtualMachineResourceState = "error"
	VPSV1VirtualMachineVirtualMachineResourceStateInitial          VPSV1VirtualMachineVirtualMachineResourceState = "initial"
	VPSV1VirtualMachineVirtualMachineResourceStateRecovery         VPSV1VirtualMachineVirtualMachineResourceState = "recovery"
	VPSV1VirtualMachineVirtualMachineResourceStateRecreating       VPSV1VirtualMachineVirtualMachineResourceState = "recreating"
	VPSV1VirtualMachineVirtualMachineResourceStateRestoring        VPSV1VirtualMachineVirtualMachineResourceState = "restoring"
	VPSV1VirtualMachineVirtualMachineResourceStateRunning          VPSV1VirtualMachineVirtualMachineResourceState = "running"
	VPSV1VirtualMachineVirtualMachineResourceStateStarting         VPSV1VirtualMachineVirtualMachineResourceState = "starting"
	VPSV1VirtualMachineVirtualMachineResourceStateStopped          VPSV1VirtualMachineVirtualMachineResourceState = "stopped"
	VPSV1VirtualMachineVirtualMachineResourceStateStopping         VPSV1VirtualMachineVirtualMachineResourceState = "stopping"
	VPSV1VirtualMachineVirtualMachineResourceStateStoppingRecovery VPSV1VirtualMachineVirtualMachineResourceState = "stopping_recovery"
	VPSV1VirtualMachineVirtualMachineResourceStateSuspended        VPSV1VirtualMachineVirtualMachineResourceState = "suspended"
	VPSV1VirtualMachineVirtualMachineResourceStateSuspending       VPSV1VirtualMachineVirtualMachineResourceState = "suspending"
	VPSV1VirtualMachineVirtualMachineResourceStateUnsuspending     VPSV1VirtualMachineVirtualMachineResourceState = "unsuspending"
)

// Defines values for Category.
const (
	CategoryDOMAIN Category = "DOMAIN"
	CategoryVPS    Category = "VPS"
)

// Defines values for BillingGetCatalogItemListV1ParamsCategory.
const (
	BillingGetCatalogItemListV1ParamsCategoryDOMAIN BillingGetCatalogItemListV1ParamsCategory = "DOMAIN"
	BillingGetCatalogItemListV1ParamsCategoryVPS    BillingGetCatalogItemListV1ParamsCategory = "VPS"
)

// BillingV1CatalogCatalogItemCollection Array of [`Billing.V1.Catalog.CatalogItemResource`](#model/billingv1catalogcatalogitemresource)
type BillingV1CatalogCatalogItemCollection = []BillingV1CatalogCatalogItemResource

// BillingV1CatalogCatalogItemPriceCollection Array of [`Billing.V1.Catalog.CatalogItemPriceResource`](#model/billingv1catalogcatalogitempriceresource)
type BillingV1CatalogCatalogItemPriceCollection = []BillingV1CatalogCatalogItemPriceResource

// BillingV1CatalogCatalogItemPriceResource defines model for Billing.V1.Catalog.CatalogItemPriceResource.
type BillingV1CatalogCatalogItemPriceResource struct {
	// Currency Currency code
	Currency *string `json:"currency,omitempty"`

	// FirstPeriodPrice First period price in cents
	FirstPeriodPrice *int `json:"first_period_price,omitempty"`

	// Id Price item ID
	Id *string `json:"id,omitempty"`

	// Name Price item name
	Name *string `json:"name,omitempty"`

	// Period Period
	Period *int `json:"period,omitempty"`

	// PeriodUnit Period unit
	PeriodUnit *BillingV1CatalogCatalogItemPriceResourcePeriodUnit `json:"period_unit,omitempty"`

	// Price Price in cents
	Price *int `json:"price,omitempty"`
}

// BillingV1CatalogCatalogItemPriceResourcePeriodUnit Period unit
type BillingV1CatalogCatalogItemPriceResourcePeriodUnit string

// BillingV1CatalogCatalogItemResource defines model for Billing.V1.Catalog.CatalogItemResource.
type BillingV1CatalogCatalogItemResource struct {
	Category *string `json:"category,omitempty"`

	// Id Catalog item ID
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	// Prices Array of [`Billing.V1.Catalog.CatalogItemPriceResource`](#model/billingv1catalogcatalogitempriceresource)
	Prices *BillingV1CatalogCatalogItemPriceCollection `json:"prices,omitempty"`
}

// BillingV1OrderOrderBillingAddressResource defines model for Billing.V1.Order.OrderBillingAddressResource.
type BillingV1OrderOrderBillingAddressResource struct {
	Address1  *string `json:"address_1"`
	Address2  *string `json:"address_2"`
	City      *string `json:"city"`
	Company   *string `json:"company"`
	Country   *string `json:"country"`
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	Phone     *string `json:"phone"`
	State     *string `json:"state"`
	Zip       *string `json:"zip"`
}

// BillingV1OrderOrderResource defines model for Billing.V1.Order.OrderResource.
type BillingV1OrderOrderResource struct {
	BillingAddress *BillingV1OrderOrderBillingAddressResource `json:"billing_address,omitempty"`
	CreatedAt      *time.Time                                 `json:"created_at,omitempty"`

	// Currency Currency code
	Currency *string `json:"currency,omitempty"`

	// Id Order ID
	Id     *int                               `json:"id,omitempty"`
	Status *BillingV1OrderOrderResourceStatus `json:"status,omitempty"`

	// SubscriptionId Subscription ID
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// Subtotal Subtotal price (exc. VAT) in cents
	Subtotal *int `json:"subtotal,omitempty"`

	// Total Total price (inc. VAT) in cents
	Total     *int       `json:"total,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// BillingV1OrderOrderResourceStatus defines model for BillingV1OrderOrderResource.Status.
type BillingV1OrderOrderResourceStatus string

// BillingV1OrderStoreRequest defines model for Billing.V1.Order.StoreRequest.
type BillingV1OrderStoreRequest struct {
	// Coupons Discount coupon codes
	Coupons *[]interface{} `json:"coupons,omitempty"`
	Items   []struct {
		// ItemId Price Item ID
		ItemId   string `json:"item_id"`
		Quantity int    `json:"quantity"`
	} `json:"items"`

	// PaymentMethodId Payment method ID
	PaymentMethodId int `json:"payment_method_id"`
}

// BillingV1PaymentMethodPaymentMethodCollection Array of [`Billing.V1.PaymentMethod.PaymentMethodResource`](#model/billingv1paymentmethodpaymentmethodresource)
type BillingV1PaymentMethodPaymentMethodCollection = []BillingV1PaymentMethodPaymentMethodResource

// BillingV1PaymentMethodPaymentMethodResource defines model for Billing.V1.PaymentMethod.PaymentMethodResource.
type BillingV1PaymentMethodPaymentMethodResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Id Payment method ID
	Id            *int    `json:"id,omitempty"`
	Identifier    *string `json:"identifier,omitempty"`
	IsDefault     *bool   `json:"is_default,omitempty"`
	IsExpired     *bool   `json:"is_expired,omitempty"`
	IsSuspended   *bool   `json:"is_suspended,omitempty"`
	Name          *string `json:"name,omitempty"`
	PaymentMethod *string `json:"payment_method,omitempty"`
}

// BillingV1SubscriptionCancelRequest defines model for Billing.V1.Subscription.CancelRequest.
type BillingV1SubscriptionCancelRequest struct {
	// CancelOption Cancellation option
	CancelOption *BillingV1SubscriptionCancelRequestCancelOption `json:"cancel_option"`

	// ReasonCode Cancellation reason code
	ReasonCode *BillingV1SubscriptionCancelRequestReasonCode `json:"reason_code"`
}

// BillingV1SubscriptionCancelRequestCancelOption Cancellation option
type BillingV1SubscriptionCancelRequestCancelOption string

// BillingV1SubscriptionCancelRequestReasonCode Cancellation reason code
type BillingV1SubscriptionCancelRequestReasonCode string

// BillingV1SubscriptionSubscriptionCollection Array of [`Billing.V1.Subscription.SubscriptionResource`](#model/billingv1subscriptionsubscriptionresource)
type BillingV1SubscriptionSubscriptionCollection = []BillingV1SubscriptionSubscriptionResource

// BillingV1SubscriptionSubscriptionResource defines model for Billing.V1.Subscription.SubscriptionResource.
type BillingV1SubscriptionSubscriptionResource struct {
	BillingPeriod     *int       `json:"billing_period,omitempty"`
	BillingPeriodUnit *string    `json:"billing_period_unit,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	CurrencyCode      *string    `json:"currency_code,omitempty"`
	ExpiresAt         *time.Time `json:"expires_at"`

	// Id Subscription ID
	Id            *string    `json:"id,omitempty"`
	IsAutoRenewed *bool      `json:"is_auto_renewed,omitempty"`
	Name          *string    `json:"name,omitempty"`
	NextBillingAt *time.Time `json:"next_billing_at"`

	// RenewalPrice Renewal price in cents
	RenewalPrice *int                                             `json:"renewal_price,omitempty"`
	Status       *BillingV1SubscriptionSubscriptionResourceStatus `json:"status,omitempty"`

	// TotalPrice Total price in cents
	TotalPrice *int `json:"total_price,omitempty"`
}

// BillingV1SubscriptionSubscriptionResourceStatus defines model for BillingV1SubscriptionSubscriptionResource.Status.
type BillingV1SubscriptionSubscriptionResourceStatus string

// CommonSchemaPaginationMetaSchema defines model for Common.Schema.PaginationMetaSchema.
type CommonSchemaPaginationMetaSchema struct {
	CurrentPage *int `json:"current_page,omitempty"`
	PerPage     *int `json:"per_page,omitempty"`
	Total       *int `json:"total,omitempty"`
}

// CommonSuccessEmptyResource defines model for Common.SuccessEmptyResource.
type CommonSuccessEmptyResource struct {
	Message *string `json:"message,omitempty"`
}

// DNSV1SnapshotSnapshotCollection Array of [`DNS.V1.Snapshot.SnapshotResource`](#model/dnsv1snapshotsnapshotresource)
type DNSV1SnapshotSnapshotCollection = []DNSV1SnapshotSnapshotResource

// DNSV1SnapshotSnapshotResource defines model for DNS.V1.Snapshot.SnapshotResource.
type DNSV1SnapshotSnapshotResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Snapshot ID
	Id *int `json:"id,omitempty"`

	// Reason Reason of the update
	Reason *string `json:"reason,omitempty"`
}

// DNSV1SnapshotSnapshotWithContentResource defines model for DNS.V1.Snapshot.SnapshotWithContentResource.
type DNSV1SnapshotSnapshotWithContentResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Snapshot ID
	Id *int `json:"id,omitempty"`

	// Reason Reason of the update
	Reason *string `json:"reason,omitempty"`

	// Snapshot Array of [`DNS.V1.Zone.RecordResource`](#model/dnsv1zonerecordresource)
	Snapshot *DNSV1ZoneRecordCollection `json:"snapshot,omitempty"`
}

// DNSV1ZoneDestroyRequest defines model for DNS.V1.Zone.DestroyRequest.
type DNSV1ZoneDestroyRequest struct {
	// Filters Filter records for deletion
	Filters []struct {
		// Name Name of the record
		Name string `json:"name"`

		// Type Type of the record
		Type DNSV1ZoneDestroyRequestFiltersType `json:"type"`
	} `json:"filters"`
}

// DNSV1ZoneDestroyRequestFiltersType Type of the record
type DNSV1ZoneDestroyRequestFiltersType string

// DNSV1ZoneNameRecordCollection Array of [`DNS.V1.Zone.NameRecordResource`](#model/dnsv1zonenamerecordresource)
type DNSV1ZoneNameRecordCollection = []DNSV1ZoneNameRecordResource

// DNSV1ZoneNameRecordResource defines model for DNS.V1.Zone.NameRecordResource.
type DNSV1ZoneNameRecordResource struct {
	// Content Content of the name record
	Content *string `json:"content,omitempty"`

	// IsDisabled Flag to mark name record as disabled
	IsDisabled *bool `json:"is_disabled,omitempty"`
}

// DNSV1ZoneRecordCollection Array of [`DNS.V1.Zone.RecordResource`](#model/dnsv1zonerecordresource)
type DNSV1ZoneRecordCollection = []DNSV1ZoneRecordResource

// DNSV1ZoneRecordResource defines model for DNS.V1.Zone.RecordResource.
type DNSV1ZoneRecordResource struct {
	// Name Name of the record (use `@` for wildcard name)
	Name *string `json:"name,omitempty"`

	// Records Array of [`DNS.V1.Zone.NameRecordResource`](#model/dnsv1zonenamerecordresource)
	Records *DNSV1ZoneNameRecordCollection `json:"records,omitempty"`

	// Ttl TTL (Time-To-Live) of the record
	Ttl *int `json:"ttl,omitempty"`

	// Type Type of the record
	Type *DNSV1ZoneRecordResourceType `json:"type,omitempty"`
}

// DNSV1ZoneRecordResourceType Type of the record
type DNSV1ZoneRecordResourceType string

// DNSV1ZoneResetRequest defines model for DNS.V1.Zone.ResetRequest.
type DNSV1ZoneResetRequest struct {
	// ResetEmailRecords Determines if email records should be reset
	ResetEmailRecords *bool `json:"reset_email_records,omitempty"`

	// Sync Determines if operation should be run synchronously
	Sync *bool `json:"sync,omitempty"`

	// WhitelistedRecordTypes Specifies which record types to not reset
	WhitelistedRecordTypes *[]string `json:"whitelisted_record_types,omitempty"`
}

// DNSV1ZoneUpdateRequest defines model for DNS.V1.Zone.UpdateRequest.
type DNSV1ZoneUpdateRequest struct {
	// Overwrite If `true`, resource records (RRs) matching name and type will be deleted and new RRs will be created, otherwise resource records' ttl's are updated and new records are appended. If no matching RRs are found, they are created.
	Overwrite *bool `json:"overwrite,omitempty"`
	Zone      []struct {
		// Name Name of the record (use `@` for wildcard name)
		Name string `json:"name"`

		// Records Records assigned to the name
		Records []struct {
			// Content Content of the name record
			Content string `json:"content"`
		} `json:"records"`

		// Ttl TTL (Time-To-Live) of the record
		Ttl *int `json:"ttl,omitempty"`

		// Type Type of the record
		Type DNSV1ZoneUpdateRequestZoneType `json:"type"`
	} `json:"zone"`
}

// DNSV1ZoneUpdateRequestZoneType Type of the record
type DNSV1ZoneUpdateRequestZoneType string

// DomainsV1AvailabilityAvailabilityCollection Array of [`Domains.V1.Availability.AvailabilityResource`](#model/domainsv1availabilityavailabilityresource)
type DomainsV1AvailabilityAvailabilityCollection = []DomainsV1AvailabilityAvailabilityResource

// DomainsV1AvailabilityAvailabilityRequest defines model for Domains.V1.Availability.AvailabilityRequest.
type DomainsV1AvailabilityAvailabilityRequest struct {
	// Domain Domain name (without TLD)
	Domain string `json:"domain"`

	// Tlds TLDs list
	Tlds []string `json:"tlds"`

	// WithAlternatives Should response include alternatives
	WithAlternatives *bool `json:"with_alternatives,omitempty"`
}

// DomainsV1AvailabilityAvailabilityResource defines model for Domains.V1.Availability.AvailabilityResource.
type DomainsV1AvailabilityAvailabilityResource struct {
	// Domain Domain name, `null` when not claimed free domain
	Domain *string `json:"domain"`

	// IsAlternative `true` if domain is provided as an alternative
	IsAlternative *bool `json:"is_alternative,omitempty"`

	// IsAvailable `true` if domain is available for registration
	IsAvailable *bool `json:"is_available,omitempty"`

	// Restriction Special rules and/or restrictions applied for registering TLD
	Restriction *string `json:"restriction"`
}

// DomainsV1DomainDomainCollection Array of [`Domains.V1.Domain.DomainResource`](#model/domainsv1domaindomainresource)
type DomainsV1DomainDomainCollection = []DomainsV1DomainDomainResource

// DomainsV1DomainDomainExtendedResource defines model for Domains.V1.Domain.DomainExtendedResource.
type DomainsV1DomainDomainExtendedResource struct {
	N60DaysLockExpiresAt *time.Time `json:"60_days_lock_expires_at"`

	// ChildNameServers Child name servers
	ChildNameServers *[][]string `json:"child_name_servers,omitempty"`
	CreatedAt        *time.Time  `json:"created_at,omitempty"`

	// Domain Domain name
	Domain *string `json:"domain,omitempty"`

	// DomainContacts WHOIS profiles
	DomainContacts *struct {
		// AdminId Admin WHOIS profile ID
		AdminId *int `json:"admin_id,omitempty"`

		// BillingId Billing WHOIS profile ID
		BillingId *int `json:"billing_id,omitempty"`

		// OwnerId Owner WHOIS profile ID
		OwnerId *int `json:"owner_id,omitempty"`

		// TechId Technician WHOIS profile ID
		TechId *int `json:"tech_id,omitempty"`
	} `json:"domain_contacts,omitempty"`
	ExpiresAt *time.Time `json:"expires_at"`

	// IsLockable Is domain allowed to be locked
	IsLockable *bool `json:"is_lockable,omitempty"`

	// IsLocked Is domain locked
	IsLocked *bool `json:"is_locked,omitempty"`

	// IsPrivacyProtected Is privacy protection enabled for the domain
	IsPrivacyProtected *bool `json:"is_privacy_protected,omitempty"`

	// IsPrivacyProtectionAllowed Is privacy protection allowed for the domain
	IsPrivacyProtectionAllowed *bool   `json:"is_privacy_protection_allowed,omitempty"`
	Message                    *string `json:"message"`

	// NameServers Name servers
	NameServers *struct {
		// Ns1 Name server 1
		Ns1 *string `json:"ns1,omitempty"`

		// Ns2 Name server 2
		Ns2 *string `json:"ns2,omitempty"`
	} `json:"name_servers,omitempty"`
	RegisteredAt *time.Time `json:"registered_at"`

	// Status Status of the domain
	Status    *DomainsV1DomainDomainExtendedResourceStatus `json:"status,omitempty"`
	UpdatedAt *time.Time                                   `json:"updated_at,omitempty"`
}

// DomainsV1DomainDomainExtendedResourceStatus Status of the domain
type DomainsV1DomainDomainExtendedResourceStatus string

// DomainsV1DomainDomainResource defines model for Domains.V1.Domain.DomainResource.
type DomainsV1DomainDomainResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Domain Domain name, `null` when not claimed free domain
	Domain    *string    `json:"domain"`
	ExpiresAt *time.Time `json:"expires_at"`

	// Id Domain ID
	Id     *int                                 `json:"id,omitempty"`
	Status *DomainsV1DomainDomainResourceStatus `json:"status,omitempty"`
	Type   *DomainsV1DomainDomainResourceType   `json:"type,omitempty"`
}

// DomainsV1DomainDomainResourceStatus defines model for DomainsV1DomainDomainResource.Status.
type DomainsV1DomainDomainResourceStatus string

// DomainsV1DomainDomainResourceType defines model for DomainsV1DomainDomainResource.Type.
type DomainsV1DomainDomainResourceType string

// DomainsV1ForwardingForwardingResource defines model for Domains.V1.Forwarding.ForwardingResource.
type DomainsV1ForwardingForwardingResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Domain Domain name
	Domain *string `json:"domain"`

	// RedirectType Redirect type
	RedirectType *DomainsV1ForwardingForwardingResourceRedirectType `json:"redirect_type,omitempty"`

	// RedirectUrl URL domain is forwarded to
	RedirectUrl *string    `json:"redirect_url,omitempty"`
	UpdatedAt   *time.Time `json:"updated_at"`
}

// DomainsV1ForwardingForwardingResourceRedirectType Redirect type
type DomainsV1ForwardingForwardingResourceRedirectType string

// DomainsV1ForwardingStoreRequest defines model for Domains.V1.Forwarding.StoreRequest.
type DomainsV1ForwardingStoreRequest struct {
	// Domain Domain name
	Domain string `json:"domain"`

	// RedirectType Redirect type
	RedirectType DomainsV1ForwardingStoreRequestRedirectType `json:"redirect_type"`

	// RedirectUrl URL to forward domain to
	RedirectUrl string `json:"redirect_url"`
}

// DomainsV1ForwardingStoreRequestRedirectType Redirect type
type DomainsV1ForwardingStoreRequestRedirectType string

// DomainsV1PortfolioPurchaseRequest defines model for Domains.V1.Portfolio.PurchaseRequest.
type DomainsV1PortfolioPurchaseRequest struct {
	// AdditionalDetails Additional registration data, possible values depends on TLD
	AdditionalDetails *map[string]interface{} `json:"additional_details,omitempty"`

	// Coupons Discount coupon codes
	Coupons *[]interface{} `json:"coupons,omitempty"`

	// Domain Domain name
	Domain string `json:"domain"`

	// DomainContacts Domain contact information
	DomainContacts *struct {
		// AdminId Administrative contact WHOIS record ID
		AdminId *int `json:"admin_id,omitempty"`

		// BillingId Billing contact WHOIS record ID
		BillingId *int `json:"billing_id,omitempty"`

		// OwnerId Owner contact WHOIS record ID
		OwnerId *int `json:"owner_id,omitempty"`

		// TechId Technical contact WHOIS record ID
		TechId *int `json:"tech_id,omitempty"`
	} `json:"domain_contacts,omitempty"`

	// ItemId Catalog price item ID
	ItemId string `json:"item_id"`

	// PaymentMethodId Payment method ID, default will be used if not provided
	PaymentMethodId *int `json:"payment_method_id,omitempty"`
}

// DomainsV1PortfolioUpdateNameserversRequest defines model for Domains.V1.Portfolio.UpdateNameserversRequest.
type DomainsV1PortfolioUpdateNameserversRequest struct {
	// Ns1 First name server
	Ns1 string `json:"ns1"`

	// Ns2 Second name server
	Ns2 string `json:"ns2"`

	// Ns3 Third name server
	Ns3 *string `json:"ns3,omitempty"`

	// Ns4 Fourth name server
	Ns4 *string `json:"ns4,omitempty"`
}

// DomainsV1WHOISProfileCollection Array of [`Domains.V1.WHOIS.ProfileResource`](#model/domainsv1whoisprofileresource)
type DomainsV1WHOISProfileCollection = []DomainsV1WHOISProfileResource

// DomainsV1WHOISProfileResource defines model for Domains.V1.WHOIS.ProfileResource.
type DomainsV1WHOISProfileResource struct {
	// Country ISO 3166 2-letter country code
	Country   *string    `json:"country,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EntityType WHOIS profile entity type
	EntityType *DomainsV1WHOISProfileResourceEntityType `json:"entity_type,omitempty"`

	// Id WHOIS Profile ID
	Id *int `json:"id,omitempty"`

	// Tld TLD to which contact profile can be applied to
	Tld *string `json:"tld,omitempty"`

	// TldDetails TLD details
	TldDetails *map[string]interface{} `json:"tld_details,omitempty"`
	UpdatedAt  *time.Time              `json:"updated_at,omitempty"`

	// WhoisDetails WHOIS profile details
	WhoisDetails *map[string]interface{} `json:"whois_details,omitempty"`
}

// DomainsV1WHOISProfileResourceEntityType WHOIS profile entity type
type DomainsV1WHOISProfileResourceEntityType string

// DomainsV1WHOISProfileUsageResource Array of domains
type DomainsV1WHOISProfileUsageResource = []string

// DomainsV1WHOISStoreRequest defines model for Domains.V1.WHOIS.StoreRequest.
type DomainsV1WHOISStoreRequest struct {
	// Country ISO 3166 2-letter country code
	Country string `json:"country"`

	// EntityType Legal entity type
	EntityType DomainsV1WHOISStoreRequestEntityType `json:"entity_type"`

	// Tld TLD of the domain (without leading dot)
	Tld string `json:"tld"`

	// TldDetails TLD details
	TldDetails *map[string]interface{} `json:"tld_details,omitempty"`

	// WhoisDetails WHOIS details
	WhoisDetails map[string]interface{} `json:"whois_details"`
}

// DomainsV1WHOISStoreRequestEntityType Legal entity type
type DomainsV1WHOISStoreRequestEntityType string

// VPSV1ActionActionCollection Array of [`VPS.V1.Action.ActionResource`](#model/vpsv1actionactionresource)
type VPSV1ActionActionCollection = []VPSV1ActionActionResource

// VPSV1ActionActionResource defines model for VPS.V1.Action.ActionResource.
type VPSV1ActionActionResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Action ID
	Id *int `json:"id,omitempty"`

	// Name Action name
	Name *string `json:"name,omitempty"`

	// State Action state
	State     *VPSV1ActionActionResourceState `json:"state,omitempty"`
	UpdatedAt *time.Time                      `json:"updated_at,omitempty"`
}

// VPSV1ActionActionResourceState Action state
type VPSV1ActionActionResourceState string

// VPSV1BackupBackupCollection Array of [`VPS.V1.Backup.BackupResource`](#model/vpsv1backupbackupresource)
type VPSV1BackupBackupCollection = []VPSV1BackupBackupResource

// VPSV1BackupBackupResource defines model for VPS.V1.Backup.BackupResource.
type VPSV1BackupBackupResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Backup ID
	Id *int `json:"id,omitempty"`

	// Location Location of the backup
	Location *string `json:"location,omitempty"`
}

// VPSV1DataCenterDataCenterCollection Array of [`VPS.V1.DataCenter.DataCenterResource`](#model/vpsv1datacenterdatacenterresource)
type VPSV1DataCenterDataCenterCollection = []VPSV1DataCenterDataCenterResource

// VPSV1DataCenterDataCenterResource defines model for VPS.V1.DataCenter.DataCenterResource.
type VPSV1DataCenterDataCenterResource struct {
	// City Data center location city
	City *string `json:"city"`

	// Continent Data center location continent
	Continent *string `json:"continent"`

	// Id Data center ID
	Id *int `json:"id,omitempty"`

	// Location Data center location country (two letter code)
	Location *string `json:"location"`

	// Name Data center name
	Name *string `json:"name"`
}

// VPSV1FirewallFirewallCollection Array of [`VPS.V1.Firewall.FirewallResource`](#model/vpsv1firewallfirewallresource)
type VPSV1FirewallFirewallCollection = []VPSV1FirewallFirewallResource

// VPSV1FirewallFirewallResource defines model for VPS.V1.Firewall.FirewallResource.
type VPSV1FirewallFirewallResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Firewall ID
	Id *int `json:"id,omitempty"`

	// IsSynced Is current firewall synced with VPS
	IsSynced *bool `json:"is_synced,omitempty"`

	// Name Firewall name
	Name *string `json:"name,omitempty"`

	// Rules Array of [`VPS.V1.Firewall.FirewallRuleResource`](#model/vpsv1firewallfirewallruleresource)
	Rules     *VPSV1FirewallFirewallRuleCollection `json:"rules,omitempty"`
	UpdatedAt *time.Time                           `json:"updated_at,omitempty"`
}

// VPSV1FirewallFirewallRuleCollection Array of [`VPS.V1.Firewall.FirewallRuleResource`](#model/vpsv1firewallfirewallruleresource)
type VPSV1FirewallFirewallRuleCollection = []VPSV1FirewallFirewallRuleResource

// VPSV1FirewallFirewallRuleResource defines model for VPS.V1.Firewall.FirewallRuleResource.
type VPSV1FirewallFirewallRuleResource struct {
	// Action Firewall rule action
	Action *VPSV1FirewallFirewallRuleResourceAction `json:"action,omitempty"`

	// Id Firewall rule ID
	Id *int `json:"id,omitempty"`

	// Port Firewall rule destination port: single or port range
	Port *string `json:"port,omitempty"`

	// Protocol Firewall rule protocol
	Protocol *VPSV1FirewallFirewallRuleResourceProtocol `json:"protocol,omitempty"`

	// Source Firewall rule source. Can be `any` or `custom`
	Source *string `json:"source,omitempty"`

	// SourceDetail Firewall rule source detail. Can be `any` or IP address, CIDR or range
	SourceDetail *string `json:"source_detail,omitempty"`
}

// VPSV1FirewallFirewallRuleResourceAction Firewall rule action
type VPSV1FirewallFirewallRuleResourceAction string

// VPSV1FirewallFirewallRuleResourceProtocol Firewall rule protocol
type VPSV1FirewallFirewallRuleResourceProtocol string

// VPSV1FirewallRulesStoreRequest defines model for VPS.V1.Firewall.Rules.StoreRequest.
type VPSV1FirewallRulesStoreRequest struct {
	// Port Port or port range, ex: 1024:2048
	Port     string                                 `json:"port"`
	Protocol VPSV1FirewallRulesStoreRequestProtocol `json:"protocol"`
	Source   VPSV1FirewallRulesStoreRequestSource   `json:"source"`

	// SourceDetail IP range, CIDR, single IP or `any`
	SourceDetail string `json:"source_detail"`
}

// VPSV1FirewallRulesStoreRequestProtocol defines model for VPSV1FirewallRulesStoreRequest.Protocol.
type VPSV1FirewallRulesStoreRequestProtocol string

// VPSV1FirewallRulesStoreRequestSource defines model for VPSV1FirewallRulesStoreRequest.Source.
type VPSV1FirewallRulesStoreRequestSource string

// VPSV1FirewallStoreRequest defines model for VPS.V1.Firewall.StoreRequest.
type VPSV1FirewallStoreRequest struct {
	Name string `json:"name"`
}

// VPSV1IPAddressIPAddressCollection Array of [`VPS.V1.IPAddress.IPAddressResource`](#model/vpsv1ipaddressipaddressresource)
type VPSV1IPAddressIPAddressCollection = []VPSV1IPAddressIPAddressResource

// VPSV1IPAddressIPAddressResource defines model for VPS.V1.IPAddress.IPAddressResource.
type VPSV1IPAddressIPAddressResource struct {
	// Address IP address: IPv4 or IPv6
	Address *string `json:"address,omitempty"`

	// Id IP address ID
	Id *int `json:"id,omitempty"`

	// Ptr IP address PTR record
	Ptr *string `json:"ptr"`
}

// VPSV1MalwareMetricsResource defines model for VPS.V1.Malware.MetricsResource.
type VPSV1MalwareMetricsResource struct {
	// Compromised Compromised files found during last scan
	Compromised *int `json:"compromised,omitempty"`

	// Malicious Malicious files found during last scan
	Malicious *int `json:"malicious,omitempty"`

	// Records Records found during last scan
	Records       *int       `json:"records,omitempty"`
	ScanEndedAt   *time.Time `json:"scan_ended_at"`
	ScanStartedAt *time.Time `json:"scan_started_at,omitempty"`

	// ScannedFiles Total number of files scanned during last scan
	ScannedFiles *int `json:"scanned_files,omitempty"`
}

// VPSV1MetricsMetricsCollection defines model for VPS.V1.Metrics.MetricsCollection.
type VPSV1MetricsMetricsCollection struct {
	// CpuUsage CPU usage in percentage, 0 - 100%
	CpuUsage *VPSV1MetricsMetricsCollection_CpuUsage `json:"cpu_usage"`

	// DiskSpace Disk space usage in bytes
	DiskSpace *VPSV1MetricsMetricsCollection_DiskSpace `json:"disk_space"`

	// IncomingTraffic Incoming traffic in bytes
	IncomingTraffic *VPSV1MetricsMetricsCollection_IncomingTraffic `json:"incoming_traffic"`

	// OutgoingTraffic Outgoing traffic in bytes
	OutgoingTraffic *VPSV1MetricsMetricsCollection_OutgoingTraffic `json:"outgoing_traffic"`

	// RamUsage RAM usage in bytes
	RamUsage *VPSV1MetricsMetricsCollection_RamUsage `json:"ram_usage"`

	// Uptime Uptime in milliseconds
	Uptime *VPSV1MetricsMetricsCollection_Uptime `json:"uptime"`
}

// VPSV1MetricsMetricsCollection_CpuUsage CPU usage in percentage, 0 - 100%
type VPSV1MetricsMetricsCollection_CpuUsage struct {
	union json.RawMessage
}

// VPSV1MetricsMetricsCollection_DiskSpace Disk space usage in bytes
type VPSV1MetricsMetricsCollection_DiskSpace struct {
	union json.RawMessage
}

// VPSV1MetricsMetricsCollection_IncomingTraffic Incoming traffic in bytes
type VPSV1MetricsMetricsCollection_IncomingTraffic struct {
	union json.RawMessage
}

// VPSV1MetricsMetricsCollection_OutgoingTraffic Outgoing traffic in bytes
type VPSV1MetricsMetricsCollection_OutgoingTraffic struct {
	union json.RawMessage
}

// VPSV1MetricsMetricsCollection_RamUsage RAM usage in bytes
type VPSV1MetricsMetricsCollection_RamUsage struct {
	union json.RawMessage
}

// VPSV1MetricsMetricsCollection_Uptime Uptime in milliseconds
type VPSV1MetricsMetricsCollection_Uptime struct {
	union json.RawMessage
}

// VPSV1MetricsMetricsResource defines model for VPS.V1.Metrics.MetricsResource.
type VPSV1MetricsMetricsResource struct {
	// Unit Measurement unit
	Unit *string `json:"unit,omitempty"`

	// Usage Object, containing UNIX timestamps as a key and measurement as a value.
	Usage *map[string]interface{} `json:"usage,omitempty"`
}

// VPSV1PostInstallScriptPostInstallScriptCollection Array of [`VPS.V1.PostInstallScript.PostInstallScriptResource`](#model/vpsv1postinstallscriptpostinstallscriptresource)
type VPSV1PostInstallScriptPostInstallScriptCollection = []VPSV1PostInstallScriptPostInstallScriptResource

// VPSV1PostInstallScriptPostInstallScriptResource defines model for VPS.V1.PostInstallScript.PostInstallScriptResource.
type VPSV1PostInstallScriptPostInstallScriptResource struct {
	// Content Content of the script
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Post-install script ID
	Id *int `json:"id,omitempty"`

	// Name Name of the script
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// VPSV1PostInstallScriptStoreRequest defines model for VPS.V1.PostInstallScript.StoreRequest.
type VPSV1PostInstallScriptStoreRequest struct {
	// Content Content of the script
	Content string `json:"content"`

	// Name Name of the script
	Name string `json:"name"`
}

// VPSV1PublicKeyAttachRequest defines model for VPS.V1.PublicKey.AttachRequest.
type VPSV1PublicKeyAttachRequest struct {
	// Ids Public Key IDs to attach
	Ids []int `json:"ids"`
}

// VPSV1PublicKeyPublicKeyCollection Array of [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource)
type VPSV1PublicKeyPublicKeyCollection = []VPSV1PublicKeyPublicKeyResource

// VPSV1PublicKeyPublicKeyResource defines model for VPS.V1.PublicKey.PublicKeyResource.
type VPSV1PublicKeyPublicKeyResource struct {
	// Id Public key ID
	Id *int `json:"id,omitempty"`

	// Key Public key content
	Key *string `json:"key,omitempty"`

	// Name Public key name
	Name *string `json:"name,omitempty"`
}

// VPSV1PublicKeyStoreRequest defines model for VPS.V1.PublicKey.StoreRequest.
type VPSV1PublicKeyStoreRequest struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

// VPSV1SnapshotSnapshotResource defines model for VPS.V1.Snapshot.SnapshotResource.
type VPSV1SnapshotSnapshotResource struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Id Snapshot ID
	Id *int `json:"id,omitempty"`
}

// VPSV1TemplateTemplateCollection Array of [`VPS.V1.Template.TemplateResource`](#model/vpsv1templatetemplateresource)
type VPSV1TemplateTemplateCollection = []VPSV1TemplateTemplateResource

// VPSV1TemplateTemplateResource defines model for VPS.V1.Template.TemplateResource.
type VPSV1TemplateTemplateResource struct {
	// Description Template description
	Description *string `json:"description,omitempty"`

	// Documentation Link to official OS documentation
	Documentation *string `json:"documentation"`

	// Id Template ID
	Id *int `json:"id,omitempty"`

	// Name Template name
	Name *string `json:"name,omitempty"`
}

// VPSV1VirtualMachineHostnameUpdateRequest defines model for VPS.V1.VirtualMachine.HostnameUpdateRequest.
type VPSV1VirtualMachineHostnameUpdateRequest struct {
	Hostname string `json:"hostname"`
}

// VPSV1VirtualMachineNameserversUpdateRequest defines model for VPS.V1.VirtualMachine.NameserversUpdateRequest.
type VPSV1VirtualMachineNameserversUpdateRequest struct {
	Ns1 string  `json:"ns1"`
	Ns2 *string `json:"ns2,omitempty"`
}

// VPSV1VirtualMachinePanelPasswordUpdateRequest defines model for VPS.V1.VirtualMachine.PanelPasswordUpdateRequest.
type VPSV1VirtualMachinePanelPasswordUpdateRequest struct {
	// Password Panel password for the virtual machine
	Password string `json:"password"`
}

// VPSV1VirtualMachinePurchaseRequest defines model for VPS.V1.VirtualMachine.PurchaseRequest.
type VPSV1VirtualMachinePurchaseRequest struct {
	// Coupons Discount coupon codes
	Coupons *[]interface{} `json:"coupons,omitempty"`

	// ItemId Catalog price item ID
	ItemId string `json:"item_id"`

	// PaymentMethodId Payment method ID, default will be used if not provided
	PaymentMethodId *int                            `json:"payment_method_id,omitempty"`
	Setup           VPSV1VirtualMachineSetupRequest `json:"setup"`
}

// VPSV1VirtualMachineRecoveryStartRequest defines model for VPS.V1.VirtualMachine.Recovery.StartRequest.
type VPSV1VirtualMachineRecoveryStartRequest struct {
	// RootPassword Temporary root password for recovery mode
	RootPassword string `json:"root_password"`
}

// VPSV1VirtualMachineRecreateRequest defines model for VPS.V1.VirtualMachine.RecreateRequest.
type VPSV1VirtualMachineRecreateRequest struct {
	// Password Password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.
	Password *string `json:"password,omitempty"`

	// PostInstallScriptId Post-install script ID
	PostInstallScriptId *int `json:"post_install_script_id,omitempty"`

	// TemplateId Template ID
	TemplateId int `json:"template_id"`
}

// VPSV1VirtualMachineRootPasswordUpdateRequest defines model for VPS.V1.VirtualMachine.RootPasswordUpdateRequest.
type VPSV1VirtualMachineRootPasswordUpdateRequest struct {
	// Password Root password for the virtual machine
	Password string `json:"password"`
}

// VPSV1VirtualMachineSetupRequest defines model for VPS.V1.VirtualMachine.SetupRequest.
type VPSV1VirtualMachineSetupRequest struct {
	// DataCenterId Data center ID
	DataCenterId int `json:"data_center_id"`

	// EnableBackups Enable weekly backup schedule
	EnableBackups *bool `json:"enable_backups,omitempty"`

	// Hostname Override default hostname of the virtual machine
	Hostname *string `json:"hostname,omitempty"`

	// InstallMonarx Install Monarx malware scanner (if supported)
	InstallMonarx *bool `json:"install_monarx,omitempty"`

	// Ns1 Name server 1
	Ns1 *string `json:"ns1,omitempty"`

	// Ns2 Name server 2
	Ns2 *string `json:"ns2,omitempty"`

	// Password Password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.
	Password *string `json:"password,omitempty"`

	// PostInstallScriptId Post-install script ID
	PostInstallScriptId *int `json:"post_install_script_id,omitempty"`

	// PublicKey Use SSH key
	PublicKey *struct {
		// Key Contents of the SSH key
		Key *string `json:"key,omitempty"`

		// Name Name of the SSH key
		Name *string `json:"name,omitempty"`
	} `json:"public_key,omitempty"`

	// TemplateId Template ID
	TemplateId int `json:"template_id"`
}

// VPSV1VirtualMachineVirtualMachineCollection Array of [`VPS.V1.VirtualMachine.VirtualMachineResource`](#model/vpsv1virtualmachinevirtualmachineresource)
type VPSV1VirtualMachineVirtualMachineCollection = []VPSV1VirtualMachineVirtualMachineResource

// VPSV1VirtualMachineVirtualMachineResource defines model for VPS.V1.VirtualMachine.VirtualMachineResource.
type VPSV1VirtualMachineVirtualMachineResource struct {
	ActionsLock *VPSV1VirtualMachineVirtualMachineResourceActionsLock `json:"actions_lock,omitempty"`

	// Bandwidth Monthly internet traffic available to virtual machine (in megabytes)
	Bandwidth *int `json:"bandwidth,omitempty"`

	// Cpus CPUs count assigned to virtual machine
	Cpus      *int       `json:"cpus,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Disk Virtual machine disk size (in megabytes)
	Disk *int `json:"disk,omitempty"`

	// FirewallGroupId Active firewall ID, `null` if disabled
	FirewallGroupId *int    `json:"firewall_group_id"`
	Hostname        *string `json:"hostname,omitempty"`

	// Id Virtual machine ID
	Id *int `json:"id,omitempty"`

	// Ipv4 IPv4 address of virtual machine
	Ipv4 *VPSV1VirtualMachineVirtualMachineResource_Ipv4 `json:"ipv4"`

	// Ipv6 IPv6 address of virtual machine, `null` if not assigned
	Ipv6 *VPSV1VirtualMachineVirtualMachineResource_Ipv6 `json:"ipv6"`

	// Memory Memory available to virtual machine (in megabytes)
	Memory *int `json:"memory,omitempty"`

	// Ns1 Primary DNS resolver
	Ns1 *string `json:"ns1"`

	// Ns2 Secondary DNS resolver
	Ns2 *string `json:"ns2"`

	// Plan VPS plan name
	Plan  *string                                         `json:"plan"`
	State *VPSV1VirtualMachineVirtualMachineResourceState `json:"state,omitempty"`

	// SubscriptionId Subscription ID
	SubscriptionId *string `json:"subscription_id"`

	// Template OS template installed in virtual machine
	Template *VPSV1VirtualMachineVirtualMachineResource_Template `json:"template"`
}

// VPSV1VirtualMachineVirtualMachineResourceActionsLock defines model for VPSV1VirtualMachineVirtualMachineResource.ActionsLock.
type VPSV1VirtualMachineVirtualMachineResourceActionsLock string

// VPSV1VirtualMachineVirtualMachineResource_Ipv4 IPv4 address of virtual machine
type VPSV1VirtualMachineVirtualMachineResource_Ipv4 struct {
	union json.RawMessage
}

// VPSV1VirtualMachineVirtualMachineResource_Ipv6 IPv6 address of virtual machine, `null` if not assigned
type VPSV1VirtualMachineVirtualMachineResource_Ipv6 struct {
	union json.RawMessage
}

// VPSV1VirtualMachineVirtualMachineResourceState defines model for VPSV1VirtualMachineVirtualMachineResource.State.
type VPSV1VirtualMachineVirtualMachineResourceState string

// VPSV1VirtualMachineVirtualMachineResource_Template OS template installed in virtual machine
type VPSV1VirtualMachineVirtualMachineResource_Template struct {
	union json.RawMessage
}

// ActionId defines model for actionId.
type ActionId = int

// BackupId defines model for backupId.
type BackupId = int

// Category defines model for category.
type Category string

// Domain defines model for domain.
type Domain = string

// FirewallId defines model for firewallId.
type FirewallId = int

// Name defines model for name.
type Name = string

// Page defines model for page.
type Page = int

// PaymentMethodId defines model for paymentMethodId.
type PaymentMethodId = int

// PostInstallScriptId defines model for postInstallScriptId.
type PostInstallScriptId = int

// PublicKeyId defines model for publicKeyId.
type PublicKeyId = int

// RuleId defines model for ruleId.
type RuleId = int

// SnapshotId defines model for snapshotId.
type SnapshotId = int

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = string

// TemplateId defines model for templateId.
type TemplateId = int

// Tld defines model for tld.
type Tld = string

// VirtualMachineId defines model for virtualMachineId.
type VirtualMachineId = int

// WhoisId defines model for whoisId.
type WhoisId = int

// CommonResponseErrorResponse defines model for Common.Response.ErrorResponse.
type CommonResponseErrorResponse struct {
	// CorrelationId Request correlation ID
	CorrelationId *string `json:"correlation_id,omitempty"`

	// Message Message of the error
	Message *string `json:"message,omitempty"`
}

// CommonResponseUnauthorizedResponse defines model for Common.Response.UnauthorizedResponse.
type CommonResponseUnauthorizedResponse struct {
	// CorrelationId Request correlation ID
	CorrelationId *string `json:"correlation_id,omitempty"`

	// Message Message of the error
	Message *string `json:"message,omitempty"`
}

// CommonResponseUnprocessableContentResponse defines model for Common.Response.UnprocessableContentResponse.
type CommonResponseUnprocessableContentResponse struct {
	// CorrelationId Request correlation ID
	CorrelationId *string `json:"correlation_id,omitempty"`

	// Errors Object of detailed errors for each field
	Errors *struct {
		Field1 *[]interface{} `json:"field_1,omitempty"`
		Field2 *[]interface{} `json:"field_2,omitempty"`
	} `json:"errors,omitempty"`

	// Message Validation error message
	Message *string `json:"message,omitempty"`
}

// BillingGetCatalogItemListV1Params defines parameters for BillingGetCatalogItemListV1.
type BillingGetCatalogItemListV1Params struct {
	// Category Filter catalog items by category
	Category *BillingGetCatalogItemListV1ParamsCategory `form:"category,omitempty" json:"category,omitempty"`

	// Name Filter catalog items by name. Use `*` for wildcard search, e.g. `.COM*` to find .com domain
	Name *Name `form:"name,omitempty" json:"name,omitempty"`
}

// BillingGetCatalogItemListV1ParamsCategory defines parameters for BillingGetCatalogItemListV1.
type BillingGetCatalogItemListV1ParamsCategory string

// DomainsGetWHOISProfileListV1Params defines parameters for DomainsGetWHOISProfileListV1.
type DomainsGetWHOISProfileListV1Params struct {
	// Tld Filter by TLD (without leading dot)
	Tld *Tld `form:"tld,omitempty" json:"tld,omitempty"`
}

// VPSGetFirewallListV1Params defines parameters for VPSGetFirewallListV1.
type VPSGetFirewallListV1Params struct {
	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// VPSGetPostInstallScriptListV1Params defines parameters for VPSGetPostInstallScriptListV1.
type VPSGetPostInstallScriptListV1Params struct {
	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// VPSGetPublicKeyListV1Params defines parameters for VPSGetPublicKeyListV1.
type VPSGetPublicKeyListV1Params struct {
	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// VPSGetActionListV1Params defines parameters for VPSGetActionListV1.
type VPSGetActionListV1Params struct {
	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// VPSGetBackupListV1Params defines parameters for VPSGetBackupListV1.
type VPSGetBackupListV1Params struct {
	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// VPSGetMetricsV1Params defines parameters for VPSGetMetricsV1.
type VPSGetMetricsV1Params struct {
	DateFrom time.Time `form:"date_from" json:"date_from"`
	DateTo   time.Time `form:"date_to" json:"date_to"`
}

// VPSGetAttachedPublicKeysV1Params defines parameters for VPSGetAttachedPublicKeysV1.
type VPSGetAttachedPublicKeysV1Params struct {
	// Page Page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// BillingCreateNewServiceOrderV1JSONRequestBody defines body for BillingCreateNewServiceOrderV1 for application/json ContentType.
type BillingCreateNewServiceOrderV1JSONRequestBody = BillingV1OrderStoreRequest

// BillingCancelSubscriptionV1JSONRequestBody defines body for BillingCancelSubscriptionV1 for application/json ContentType.
type BillingCancelSubscriptionV1JSONRequestBody = BillingV1SubscriptionCancelRequest

// DNSDeleteZoneRecordsV1JSONRequestBody defines body for DNSDeleteZoneRecordsV1 for application/json ContentType.
type DNSDeleteZoneRecordsV1JSONRequestBody = DNSV1ZoneDestroyRequest

// DNSUpdateZoneRecordsV1JSONRequestBody defines body for DNSUpdateZoneRecordsV1 for application/json ContentType.
type DNSUpdateZoneRecordsV1JSONRequestBody = DNSV1ZoneUpdateRequest

// DNSResetZoneRecordsV1JSONRequestBody defines body for DNSResetZoneRecordsV1 for application/json ContentType.
type DNSResetZoneRecordsV1JSONRequestBody = DNSV1ZoneResetRequest

// DNSValidateZoneRecordsV1JSONRequestBody defines body for DNSValidateZoneRecordsV1 for application/json ContentType.
type DNSValidateZoneRecordsV1JSONRequestBody = DNSV1ZoneUpdateRequest

// DomainsCheckDomainAvailabilityV1JSONRequestBody defines body for DomainsCheckDomainAvailabilityV1 for application/json ContentType.
type DomainsCheckDomainAvailabilityV1JSONRequestBody = DomainsV1AvailabilityAvailabilityRequest

// DomainsCreateForwardingDataV1JSONRequestBody defines body for DomainsCreateForwardingDataV1 for application/json ContentType.
type DomainsCreateForwardingDataV1JSONRequestBody = DomainsV1ForwardingStoreRequest

// DomainsPurchaseNewDomainV1JSONRequestBody defines body for DomainsPurchaseNewDomainV1 for application/json ContentType.
type DomainsPurchaseNewDomainV1JSONRequestBody = DomainsV1PortfolioPurchaseRequest

// DomainsUpdateNameserversV1JSONRequestBody defines body for DomainsUpdateNameserversV1 for application/json ContentType.
type DomainsUpdateNameserversV1JSONRequestBody = DomainsV1PortfolioUpdateNameserversRequest

// DomainsCreateWHOISProfileV1JSONRequestBody defines body for DomainsCreateWHOISProfileV1 for application/json ContentType.
type DomainsCreateWHOISProfileV1JSONRequestBody = DomainsV1WHOISStoreRequest

// VPSCreateNewFirewallV1JSONRequestBody defines body for VPSCreateNewFirewallV1 for application/json ContentType.
type VPSCreateNewFirewallV1JSONRequestBody = VPSV1FirewallStoreRequest

// VPSCreateFirewallRuleV1JSONRequestBody defines body for VPSCreateFirewallRuleV1 for application/json ContentType.
type VPSCreateFirewallRuleV1JSONRequestBody = VPSV1FirewallRulesStoreRequest

// VPSUpdateFirewallRuleV1JSONRequestBody defines body for VPSUpdateFirewallRuleV1 for application/json ContentType.
type VPSUpdateFirewallRuleV1JSONRequestBody = VPSV1FirewallRulesStoreRequest

// VPSCreatePostInstallScriptV1JSONRequestBody defines body for VPSCreatePostInstallScriptV1 for application/json ContentType.
type VPSCreatePostInstallScriptV1JSONRequestBody = VPSV1PostInstallScriptStoreRequest

// VPSUpdatePostInstallScriptV1JSONRequestBody defines body for VPSUpdatePostInstallScriptV1 for application/json ContentType.
type VPSUpdatePostInstallScriptV1JSONRequestBody = VPSV1PostInstallScriptStoreRequest

// VPSCreateNewPublicKeyV1JSONRequestBody defines body for VPSCreateNewPublicKeyV1 for application/json ContentType.
type VPSCreateNewPublicKeyV1JSONRequestBody = VPSV1PublicKeyStoreRequest

// VPSAttachPublicKeyV1JSONRequestBody defines body for VPSAttachPublicKeyV1 for application/json ContentType.
type VPSAttachPublicKeyV1JSONRequestBody = VPSV1PublicKeyAttachRequest

// VPSPurchaseNewVirtualMachineV1JSONRequestBody defines body for VPSPurchaseNewVirtualMachineV1 for application/json ContentType.
type VPSPurchaseNewVirtualMachineV1JSONRequestBody = VPSV1VirtualMachinePurchaseRequest

// VPSSetHostnameV1JSONRequestBody defines body for VPSSetHostnameV1 for application/json ContentType.
type VPSSetHostnameV1JSONRequestBody = VPSV1VirtualMachineHostnameUpdateRequest

// VPSSetNameserversV1JSONRequestBody defines body for VPSSetNameserversV1 for application/json ContentType.
type VPSSetNameserversV1JSONRequestBody = VPSV1VirtualMachineNameserversUpdateRequest

// VPSSetPanelPasswordV1JSONRequestBody defines body for VPSSetPanelPasswordV1 for application/json ContentType.
type VPSSetPanelPasswordV1JSONRequestBody = VPSV1VirtualMachinePanelPasswordUpdateRequest

// VPSStartRecoveryModeV1JSONRequestBody defines body for VPSStartRecoveryModeV1 for application/json ContentType.
type VPSStartRecoveryModeV1JSONRequestBody = VPSV1VirtualMachineRecoveryStartRequest

// VPSRecreateVirtualMachineV1JSONRequestBody defines body for VPSRecreateVirtualMachineV1 for application/json ContentType.
type VPSRecreateVirtualMachineV1JSONRequestBody = VPSV1VirtualMachineRecreateRequest

// VPSSetRootPasswordV1JSONRequestBody defines body for VPSSetRootPasswordV1 for application/json ContentType.
type VPSSetRootPasswordV1JSONRequestBody = VPSV1VirtualMachineRootPasswordUpdateRequest

// VPSSetupNewVirtualMachineV1JSONRequestBody defines body for VPSSetupNewVirtualMachineV1 for application/json ContentType.
type VPSSetupNewVirtualMachineV1JSONRequestBody = VPSV1VirtualMachineSetupRequest

// AsVPSV1MetricsMetricsResource returns the union data inside the VPSV1MetricsMetricsCollection_CpuUsage as a VPSV1MetricsMetricsResource
func (t VPSV1MetricsMetricsCollection_CpuUsage) AsVPSV1MetricsMetricsResource() (VPSV1MetricsMetricsResource, error) {
	var body VPSV1MetricsMetricsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1MetricsMetricsResource overwrites any union data inside the VPSV1MetricsMetricsCollection_CpuUsage as the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_CpuUsage) FromVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1MetricsMetricsResource performs a merge with any union data inside the VPSV1MetricsMetricsCollection_CpuUsage, using the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_CpuUsage) MergeVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1MetricsMetricsCollection_CpuUsage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1MetricsMetricsCollection_CpuUsage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1MetricsMetricsResource returns the union data inside the VPSV1MetricsMetricsCollection_DiskSpace as a VPSV1MetricsMetricsResource
func (t VPSV1MetricsMetricsCollection_DiskSpace) AsVPSV1MetricsMetricsResource() (VPSV1MetricsMetricsResource, error) {
	var body VPSV1MetricsMetricsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1MetricsMetricsResource overwrites any union data inside the VPSV1MetricsMetricsCollection_DiskSpace as the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_DiskSpace) FromVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1MetricsMetricsResource performs a merge with any union data inside the VPSV1MetricsMetricsCollection_DiskSpace, using the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_DiskSpace) MergeVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1MetricsMetricsCollection_DiskSpace) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1MetricsMetricsCollection_DiskSpace) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1MetricsMetricsResource returns the union data inside the VPSV1MetricsMetricsCollection_IncomingTraffic as a VPSV1MetricsMetricsResource
func (t VPSV1MetricsMetricsCollection_IncomingTraffic) AsVPSV1MetricsMetricsResource() (VPSV1MetricsMetricsResource, error) {
	var body VPSV1MetricsMetricsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1MetricsMetricsResource overwrites any union data inside the VPSV1MetricsMetricsCollection_IncomingTraffic as the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_IncomingTraffic) FromVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1MetricsMetricsResource performs a merge with any union data inside the VPSV1MetricsMetricsCollection_IncomingTraffic, using the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_IncomingTraffic) MergeVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1MetricsMetricsCollection_IncomingTraffic) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1MetricsMetricsCollection_IncomingTraffic) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1MetricsMetricsResource returns the union data inside the VPSV1MetricsMetricsCollection_OutgoingTraffic as a VPSV1MetricsMetricsResource
func (t VPSV1MetricsMetricsCollection_OutgoingTraffic) AsVPSV1MetricsMetricsResource() (VPSV1MetricsMetricsResource, error) {
	var body VPSV1MetricsMetricsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1MetricsMetricsResource overwrites any union data inside the VPSV1MetricsMetricsCollection_OutgoingTraffic as the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_OutgoingTraffic) FromVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1MetricsMetricsResource performs a merge with any union data inside the VPSV1MetricsMetricsCollection_OutgoingTraffic, using the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_OutgoingTraffic) MergeVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1MetricsMetricsCollection_OutgoingTraffic) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1MetricsMetricsCollection_OutgoingTraffic) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1MetricsMetricsResource returns the union data inside the VPSV1MetricsMetricsCollection_RamUsage as a VPSV1MetricsMetricsResource
func (t VPSV1MetricsMetricsCollection_RamUsage) AsVPSV1MetricsMetricsResource() (VPSV1MetricsMetricsResource, error) {
	var body VPSV1MetricsMetricsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1MetricsMetricsResource overwrites any union data inside the VPSV1MetricsMetricsCollection_RamUsage as the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_RamUsage) FromVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1MetricsMetricsResource performs a merge with any union data inside the VPSV1MetricsMetricsCollection_RamUsage, using the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_RamUsage) MergeVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1MetricsMetricsCollection_RamUsage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1MetricsMetricsCollection_RamUsage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1MetricsMetricsResource returns the union data inside the VPSV1MetricsMetricsCollection_Uptime as a VPSV1MetricsMetricsResource
func (t VPSV1MetricsMetricsCollection_Uptime) AsVPSV1MetricsMetricsResource() (VPSV1MetricsMetricsResource, error) {
	var body VPSV1MetricsMetricsResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1MetricsMetricsResource overwrites any union data inside the VPSV1MetricsMetricsCollection_Uptime as the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_Uptime) FromVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1MetricsMetricsResource performs a merge with any union data inside the VPSV1MetricsMetricsCollection_Uptime, using the provided VPSV1MetricsMetricsResource
func (t *VPSV1MetricsMetricsCollection_Uptime) MergeVPSV1MetricsMetricsResource(v VPSV1MetricsMetricsResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1MetricsMetricsCollection_Uptime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1MetricsMetricsCollection_Uptime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1IPAddressIPAddressCollection returns the union data inside the VPSV1VirtualMachineVirtualMachineResource_Ipv4 as a VPSV1IPAddressIPAddressCollection
func (t VPSV1VirtualMachineVirtualMachineResource_Ipv4) AsVPSV1IPAddressIPAddressCollection() (VPSV1IPAddressIPAddressCollection, error) {
	var body VPSV1IPAddressIPAddressCollection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1IPAddressIPAddressCollection overwrites any union data inside the VPSV1VirtualMachineVirtualMachineResource_Ipv4 as the provided VPSV1IPAddressIPAddressCollection
func (t *VPSV1VirtualMachineVirtualMachineResource_Ipv4) FromVPSV1IPAddressIPAddressCollection(v VPSV1IPAddressIPAddressCollection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1IPAddressIPAddressCollection performs a merge with any union data inside the VPSV1VirtualMachineVirtualMachineResource_Ipv4, using the provided VPSV1IPAddressIPAddressCollection
func (t *VPSV1VirtualMachineVirtualMachineResource_Ipv4) MergeVPSV1IPAddressIPAddressCollection(v VPSV1IPAddressIPAddressCollection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1VirtualMachineVirtualMachineResource_Ipv4) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1VirtualMachineVirtualMachineResource_Ipv4) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1IPAddressIPAddressCollection returns the union data inside the VPSV1VirtualMachineVirtualMachineResource_Ipv6 as a VPSV1IPAddressIPAddressCollection
func (t VPSV1VirtualMachineVirtualMachineResource_Ipv6) AsVPSV1IPAddressIPAddressCollection() (VPSV1IPAddressIPAddressCollection, error) {
	var body VPSV1IPAddressIPAddressCollection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1IPAddressIPAddressCollection overwrites any union data inside the VPSV1VirtualMachineVirtualMachineResource_Ipv6 as the provided VPSV1IPAddressIPAddressCollection
func (t *VPSV1VirtualMachineVirtualMachineResource_Ipv6) FromVPSV1IPAddressIPAddressCollection(v VPSV1IPAddressIPAddressCollection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1IPAddressIPAddressCollection performs a merge with any union data inside the VPSV1VirtualMachineVirtualMachineResource_Ipv6, using the provided VPSV1IPAddressIPAddressCollection
func (t *VPSV1VirtualMachineVirtualMachineResource_Ipv6) MergeVPSV1IPAddressIPAddressCollection(v VPSV1IPAddressIPAddressCollection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1VirtualMachineVirtualMachineResource_Ipv6) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1VirtualMachineVirtualMachineResource_Ipv6) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVPSV1TemplateTemplateResource returns the union data inside the VPSV1VirtualMachineVirtualMachineResource_Template as a VPSV1TemplateTemplateResource
func (t VPSV1VirtualMachineVirtualMachineResource_Template) AsVPSV1TemplateTemplateResource() (VPSV1TemplateTemplateResource, error) {
	var body VPSV1TemplateTemplateResource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVPSV1TemplateTemplateResource overwrites any union data inside the VPSV1VirtualMachineVirtualMachineResource_Template as the provided VPSV1TemplateTemplateResource
func (t *VPSV1VirtualMachineVirtualMachineResource_Template) FromVPSV1TemplateTemplateResource(v VPSV1TemplateTemplateResource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVPSV1TemplateTemplateResource performs a merge with any union data inside the VPSV1VirtualMachineVirtualMachineResource_Template, using the provided VPSV1TemplateTemplateResource
func (t *VPSV1VirtualMachineVirtualMachineResource_Template) MergeVPSV1TemplateTemplateResource(v VPSV1TemplateTemplateResource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VPSV1VirtualMachineVirtualMachineResource_Template) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VPSV1VirtualMachineVirtualMachineResource_Template) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BillingGetCatalogItemListV1 request
	BillingGetCatalogItemListV1(ctx context.Context, params *BillingGetCatalogItemListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingCreateNewServiceOrderV1WithBody request with any body
	BillingCreateNewServiceOrderV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingCreateNewServiceOrderV1(ctx context.Context, body BillingCreateNewServiceOrderV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingGetPaymentMethodListV1 request
	BillingGetPaymentMethodListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingDeletePaymentMethodV1 request
	BillingDeletePaymentMethodV1(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingSetDefaultPaymentMethodV1 request
	BillingSetDefaultPaymentMethodV1(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingGetSubscriptionListV1 request
	BillingGetSubscriptionListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingCancelSubscriptionV1WithBody request with any body
	BillingCancelSubscriptionV1WithBody(ctx context.Context, subscriptionId SubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingCancelSubscriptionV1(ctx context.Context, subscriptionId SubscriptionId, body BillingCancelSubscriptionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSGetSnapshotListV1 request
	DNSGetSnapshotListV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSGetSnapshotV1 request
	DNSGetSnapshotV1(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSRestoreSnapshotV1 request
	DNSRestoreSnapshotV1(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSDeleteZoneRecordsV1WithBody request with any body
	DNSDeleteZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DNSDeleteZoneRecordsV1(ctx context.Context, domain Domain, body DNSDeleteZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSGetRecordsV1 request
	DNSGetRecordsV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSUpdateZoneRecordsV1WithBody request with any body
	DNSUpdateZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DNSUpdateZoneRecordsV1(ctx context.Context, domain Domain, body DNSUpdateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSResetZoneRecordsV1WithBody request with any body
	DNSResetZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DNSResetZoneRecordsV1(ctx context.Context, domain Domain, body DNSResetZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DNSValidateZoneRecordsV1WithBody request with any body
	DNSValidateZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DNSValidateZoneRecordsV1(ctx context.Context, domain Domain, body DNSValidateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsCheckDomainAvailabilityV1WithBody request with any body
	DomainsCheckDomainAvailabilityV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCheckDomainAvailabilityV1(ctx context.Context, body DomainsCheckDomainAvailabilityV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsCreateForwardingDataV1WithBody request with any body
	DomainsCreateForwardingDataV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCreateForwardingDataV1(ctx context.Context, body DomainsCreateForwardingDataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDeleteForwardingDataV1 request
	DomainsDeleteForwardingDataV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsGetForwardingDataV1 request
	DomainsGetForwardingDataV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsGetDomainListV1 request
	DomainsGetDomainListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsPurchaseNewDomainV1WithBody request with any body
	DomainsPurchaseNewDomainV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsPurchaseNewDomainV1(ctx context.Context, body DomainsPurchaseNewDomainV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsGetDomainV1 request
	DomainsGetDomainV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDisableDomainLockV1 request
	DomainsDisableDomainLockV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsEnableDomainLockV1 request
	DomainsEnableDomainLockV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsUpdateNameserversV1WithBody request with any body
	DomainsUpdateNameserversV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsUpdateNameserversV1(ctx context.Context, domain Domain, body DomainsUpdateNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDisablePrivacyProtectionV1 request
	DomainsDisablePrivacyProtectionV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsEnablePrivacyProtectionV1 request
	DomainsEnablePrivacyProtectionV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsGetWHOISProfileListV1 request
	DomainsGetWHOISProfileListV1(ctx context.Context, params *DomainsGetWHOISProfileListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsCreateWHOISProfileV1WithBody request with any body
	DomainsCreateWHOISProfileV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainsCreateWHOISProfileV1(ctx context.Context, body DomainsCreateWHOISProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsDeleteWHOISProfileV1 request
	DomainsDeleteWHOISProfileV1(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsGetWHOISProfileV1 request
	DomainsGetWHOISProfileV1(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainsGetWHOISProfileUsageV1 request
	DomainsGetWHOISProfileUsageV1(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetDataCentersListV1 request
	VPSGetDataCentersListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetFirewallListV1 request
	VPSGetFirewallListV1(ctx context.Context, params *VPSGetFirewallListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSCreateNewFirewallV1WithBody request with any body
	VPSCreateNewFirewallV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSCreateNewFirewallV1(ctx context.Context, body VPSCreateNewFirewallV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeleteFirewallV1 request
	VPSDeleteFirewallV1(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetFirewallV1 request
	VPSGetFirewallV1(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSActivateFirewallV1 request
	VPSActivateFirewallV1(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeactivateFirewallV1 request
	VPSDeactivateFirewallV1(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSCreateFirewallRuleV1WithBody request with any body
	VPSCreateFirewallRuleV1WithBody(ctx context.Context, firewallId FirewallId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSCreateFirewallRuleV1(ctx context.Context, firewallId FirewallId, body VPSCreateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeleteFirewallRuleV1 request
	VPSDeleteFirewallRuleV1(ctx context.Context, firewallId FirewallId, ruleId RuleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSUpdateFirewallRuleV1WithBody request with any body
	VPSUpdateFirewallRuleV1WithBody(ctx context.Context, firewallId FirewallId, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSUpdateFirewallRuleV1(ctx context.Context, firewallId FirewallId, ruleId RuleId, body VPSUpdateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSSyncFirewallV1 request
	VPSSyncFirewallV1(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetPostInstallScriptListV1 request
	VPSGetPostInstallScriptListV1(ctx context.Context, params *VPSGetPostInstallScriptListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSCreatePostInstallScriptV1WithBody request with any body
	VPSCreatePostInstallScriptV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSCreatePostInstallScriptV1(ctx context.Context, body VPSCreatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeleteAPostInstallScriptV1 request
	VPSDeleteAPostInstallScriptV1(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetPostInstallScriptV1 request
	VPSGetPostInstallScriptV1(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSUpdatePostInstallScriptV1WithBody request with any body
	VPSUpdatePostInstallScriptV1WithBody(ctx context.Context, postInstallScriptId PostInstallScriptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSUpdatePostInstallScriptV1(ctx context.Context, postInstallScriptId PostInstallScriptId, body VPSUpdatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetPublicKeyListV1 request
	VPSGetPublicKeyListV1(ctx context.Context, params *VPSGetPublicKeyListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSCreateNewPublicKeyV1WithBody request with any body
	VPSCreateNewPublicKeyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSCreateNewPublicKeyV1(ctx context.Context, body VPSCreateNewPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSAttachPublicKeyV1WithBody request with any body
	VPSAttachPublicKeyV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSAttachPublicKeyV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSAttachPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeleteAPublicKeyV1 request
	VPSDeleteAPublicKeyV1(ctx context.Context, publicKeyId PublicKeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetTemplateListV1 request
	VPSGetTemplateListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetTemplateV1 request
	VPSGetTemplateV1(ctx context.Context, templateId TemplateId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetVirtualMachineListV1 request
	VPSGetVirtualMachineListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSPurchaseNewVirtualMachineV1WithBody request with any body
	VPSPurchaseNewVirtualMachineV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSPurchaseNewVirtualMachineV1(ctx context.Context, body VPSPurchaseNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetVirtualMachineV1 request
	VPSGetVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetActionListV1 request
	VPSGetActionListV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetActionListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetActionV1 request
	VPSGetActionV1(ctx context.Context, virtualMachineId VirtualMachineId, actionId ActionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetBackupListV1 request
	VPSGetBackupListV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetBackupListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeleteBackupV1 request
	VPSDeleteBackupV1(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSRestoreBackupV1 request
	VPSRestoreBackupV1(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSResetHostnameV1 request
	VPSResetHostnameV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSSetHostnameV1WithBody request with any body
	VPSSetHostnameV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSSetHostnameV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetHostnameV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetMetricsV1 request
	VPSGetMetricsV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetMetricsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSUninstallMonarxV1 request
	VPSUninstallMonarxV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetScanMetricsV1 request
	VPSGetScanMetricsV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSInstallMonarxV1 request
	VPSInstallMonarxV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSSetNameserversV1WithBody request with any body
	VPSSetNameserversV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSSetNameserversV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSSetPanelPasswordV1WithBody request with any body
	VPSSetPanelPasswordV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSSetPanelPasswordV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetPanelPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeletePTRRecordV1 request
	VPSDeletePTRRecordV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSCreatePTRRecordV1 request
	VPSCreatePTRRecordV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetAttachedPublicKeysV1 request
	VPSGetAttachedPublicKeysV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetAttachedPublicKeysV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSStopRecoveryModeV1 request
	VPSStopRecoveryModeV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSStartRecoveryModeV1WithBody request with any body
	VPSStartRecoveryModeV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSStartRecoveryModeV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSStartRecoveryModeV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSRecreateVirtualMachineV1WithBody request with any body
	VPSRecreateVirtualMachineV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSRecreateVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSRecreateVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSRestartVirtualMachineV1 request
	VPSRestartVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSSetRootPasswordV1WithBody request with any body
	VPSSetRootPasswordV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSSetRootPasswordV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetRootPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSSetupNewVirtualMachineV1WithBody request with any body
	VPSSetupNewVirtualMachineV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VPSSetupNewVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetupNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSDeleteSnapshotV1 request
	VPSDeleteSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSGetSnapshotV1 request
	VPSGetSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSCreateSnapshotV1 request
	VPSCreateSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSRestoreSnapshotV1 request
	VPSRestoreSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSStartVirtualMachineV1 request
	VPSStartVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VPSStopVirtualMachineV1 request
	VPSStopVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BillingGetCatalogItemListV1(ctx context.Context, params *BillingGetCatalogItemListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingGetCatalogItemListV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateNewServiceOrderV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateNewServiceOrderV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateNewServiceOrderV1(ctx context.Context, body BillingCreateNewServiceOrderV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateNewServiceOrderV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingGetPaymentMethodListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingGetPaymentMethodListV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingDeletePaymentMethodV1(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingDeletePaymentMethodV1Request(c.Server, paymentMethodId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingSetDefaultPaymentMethodV1(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingSetDefaultPaymentMethodV1Request(c.Server, paymentMethodId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingGetSubscriptionListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingGetSubscriptionListV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCancelSubscriptionV1WithBody(ctx context.Context, subscriptionId SubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCancelSubscriptionV1RequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCancelSubscriptionV1(ctx context.Context, subscriptionId SubscriptionId, body BillingCancelSubscriptionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCancelSubscriptionV1Request(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSGetSnapshotListV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSGetSnapshotListV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSGetSnapshotV1(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSGetSnapshotV1Request(c.Server, domain, snapshotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSRestoreSnapshotV1(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSRestoreSnapshotV1Request(c.Server, domain, snapshotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSDeleteZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSDeleteZoneRecordsV1RequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSDeleteZoneRecordsV1(ctx context.Context, domain Domain, body DNSDeleteZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSDeleteZoneRecordsV1Request(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSGetRecordsV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSGetRecordsV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSUpdateZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSUpdateZoneRecordsV1RequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSUpdateZoneRecordsV1(ctx context.Context, domain Domain, body DNSUpdateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSUpdateZoneRecordsV1Request(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSResetZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSResetZoneRecordsV1RequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSResetZoneRecordsV1(ctx context.Context, domain Domain, body DNSResetZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSResetZoneRecordsV1Request(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSValidateZoneRecordsV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSValidateZoneRecordsV1RequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DNSValidateZoneRecordsV1(ctx context.Context, domain Domain, body DNSValidateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDNSValidateZoneRecordsV1Request(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCheckDomainAvailabilityV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCheckDomainAvailabilityV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCheckDomainAvailabilityV1(ctx context.Context, body DomainsCheckDomainAvailabilityV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCheckDomainAvailabilityV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateForwardingDataV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateForwardingDataV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateForwardingDataV1(ctx context.Context, body DomainsCreateForwardingDataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateForwardingDataV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDeleteForwardingDataV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDeleteForwardingDataV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsGetForwardingDataV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsGetForwardingDataV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsGetDomainListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsGetDomainListV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPurchaseNewDomainV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPurchaseNewDomainV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsPurchaseNewDomainV1(ctx context.Context, body DomainsPurchaseNewDomainV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsPurchaseNewDomainV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsGetDomainV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsGetDomainV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDisableDomainLockV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDisableDomainLockV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsEnableDomainLockV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsEnableDomainLockV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdateNameserversV1WithBody(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateNameserversV1RequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsUpdateNameserversV1(ctx context.Context, domain Domain, body DomainsUpdateNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsUpdateNameserversV1Request(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDisablePrivacyProtectionV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDisablePrivacyProtectionV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsEnablePrivacyProtectionV1(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsEnablePrivacyProtectionV1Request(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsGetWHOISProfileListV1(ctx context.Context, params *DomainsGetWHOISProfileListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsGetWHOISProfileListV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateWHOISProfileV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateWHOISProfileV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsCreateWHOISProfileV1(ctx context.Context, body DomainsCreateWHOISProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsCreateWHOISProfileV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsDeleteWHOISProfileV1(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsDeleteWHOISProfileV1Request(c.Server, whoisId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsGetWHOISProfileV1(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsGetWHOISProfileV1Request(c.Server, whoisId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainsGetWHOISProfileUsageV1(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainsGetWHOISProfileUsageV1Request(c.Server, whoisId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetDataCentersListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetDataCentersListV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetFirewallListV1(ctx context.Context, params *VPSGetFirewallListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetFirewallListV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateNewFirewallV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateNewFirewallV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateNewFirewallV1(ctx context.Context, body VPSCreateNewFirewallV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateNewFirewallV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeleteFirewallV1(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeleteFirewallV1Request(c.Server, firewallId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetFirewallV1(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetFirewallV1Request(c.Server, firewallId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSActivateFirewallV1(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSActivateFirewallV1Request(c.Server, firewallId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeactivateFirewallV1(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeactivateFirewallV1Request(c.Server, firewallId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateFirewallRuleV1WithBody(ctx context.Context, firewallId FirewallId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateFirewallRuleV1RequestWithBody(c.Server, firewallId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateFirewallRuleV1(ctx context.Context, firewallId FirewallId, body VPSCreateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateFirewallRuleV1Request(c.Server, firewallId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeleteFirewallRuleV1(ctx context.Context, firewallId FirewallId, ruleId RuleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeleteFirewallRuleV1Request(c.Server, firewallId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSUpdateFirewallRuleV1WithBody(ctx context.Context, firewallId FirewallId, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSUpdateFirewallRuleV1RequestWithBody(c.Server, firewallId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSUpdateFirewallRuleV1(ctx context.Context, firewallId FirewallId, ruleId RuleId, body VPSUpdateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSUpdateFirewallRuleV1Request(c.Server, firewallId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSyncFirewallV1(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSyncFirewallV1Request(c.Server, firewallId, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetPostInstallScriptListV1(ctx context.Context, params *VPSGetPostInstallScriptListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetPostInstallScriptListV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreatePostInstallScriptV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreatePostInstallScriptV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreatePostInstallScriptV1(ctx context.Context, body VPSCreatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreatePostInstallScriptV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeleteAPostInstallScriptV1(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeleteAPostInstallScriptV1Request(c.Server, postInstallScriptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetPostInstallScriptV1(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetPostInstallScriptV1Request(c.Server, postInstallScriptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSUpdatePostInstallScriptV1WithBody(ctx context.Context, postInstallScriptId PostInstallScriptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSUpdatePostInstallScriptV1RequestWithBody(c.Server, postInstallScriptId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSUpdatePostInstallScriptV1(ctx context.Context, postInstallScriptId PostInstallScriptId, body VPSUpdatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSUpdatePostInstallScriptV1Request(c.Server, postInstallScriptId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetPublicKeyListV1(ctx context.Context, params *VPSGetPublicKeyListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetPublicKeyListV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateNewPublicKeyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateNewPublicKeyV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateNewPublicKeyV1(ctx context.Context, body VPSCreateNewPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateNewPublicKeyV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSAttachPublicKeyV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSAttachPublicKeyV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSAttachPublicKeyV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSAttachPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSAttachPublicKeyV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeleteAPublicKeyV1(ctx context.Context, publicKeyId PublicKeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeleteAPublicKeyV1Request(c.Server, publicKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetTemplateListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetTemplateListV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetTemplateV1(ctx context.Context, templateId TemplateId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetTemplateV1Request(c.Server, templateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetVirtualMachineListV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetVirtualMachineListV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSPurchaseNewVirtualMachineV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSPurchaseNewVirtualMachineV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSPurchaseNewVirtualMachineV1(ctx context.Context, body VPSPurchaseNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSPurchaseNewVirtualMachineV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetVirtualMachineV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetActionListV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetActionListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetActionListV1Request(c.Server, virtualMachineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetActionV1(ctx context.Context, virtualMachineId VirtualMachineId, actionId ActionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetActionV1Request(c.Server, virtualMachineId, actionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetBackupListV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetBackupListV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetBackupListV1Request(c.Server, virtualMachineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeleteBackupV1(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeleteBackupV1Request(c.Server, virtualMachineId, backupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSRestoreBackupV1(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSRestoreBackupV1Request(c.Server, virtualMachineId, backupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSResetHostnameV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSResetHostnameV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetHostnameV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetHostnameV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetHostnameV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetHostnameV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetHostnameV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetMetricsV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetMetricsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetMetricsV1Request(c.Server, virtualMachineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSUninstallMonarxV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSUninstallMonarxV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetScanMetricsV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetScanMetricsV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSInstallMonarxV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSInstallMonarxV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetNameserversV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetNameserversV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetNameserversV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetNameserversV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetPanelPasswordV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetPanelPasswordV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetPanelPasswordV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetPanelPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetPanelPasswordV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeletePTRRecordV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeletePTRRecordV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreatePTRRecordV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreatePTRRecordV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetAttachedPublicKeysV1(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetAttachedPublicKeysV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetAttachedPublicKeysV1Request(c.Server, virtualMachineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSStopRecoveryModeV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSStopRecoveryModeV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSStartRecoveryModeV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSStartRecoveryModeV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSStartRecoveryModeV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSStartRecoveryModeV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSStartRecoveryModeV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSRecreateVirtualMachineV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSRecreateVirtualMachineV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSRecreateVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSRecreateVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSRecreateVirtualMachineV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSRestartVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSRestartVirtualMachineV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetRootPasswordV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetRootPasswordV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetRootPasswordV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetRootPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetRootPasswordV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetupNewVirtualMachineV1WithBody(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetupNewVirtualMachineV1RequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSSetupNewVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetupNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSSetupNewVirtualMachineV1Request(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSDeleteSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSDeleteSnapshotV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSGetSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSGetSnapshotV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSCreateSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSCreateSnapshotV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSRestoreSnapshotV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSRestoreSnapshotV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSStartVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSStartVirtualMachineV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VPSStopVirtualMachineV1(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVPSStopVirtualMachineV1Request(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBillingGetCatalogItemListV1Request generates requests for BillingGetCatalogItemListV1
func NewBillingGetCatalogItemListV1Request(server string, params *BillingGetCatalogItemListV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/catalog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingCreateNewServiceOrderV1Request calls the generic BillingCreateNewServiceOrderV1 builder with application/json body
func NewBillingCreateNewServiceOrderV1Request(server string, body BillingCreateNewServiceOrderV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingCreateNewServiceOrderV1RequestWithBody(server, "application/json", bodyReader)
}

// NewBillingCreateNewServiceOrderV1RequestWithBody generates requests for BillingCreateNewServiceOrderV1 with any type of body
func NewBillingCreateNewServiceOrderV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingGetPaymentMethodListV1Request generates requests for BillingGetPaymentMethodListV1
func NewBillingGetPaymentMethodListV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/payment-methods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingDeletePaymentMethodV1Request generates requests for BillingDeletePaymentMethodV1
func NewBillingDeletePaymentMethodV1Request(server string, paymentMethodId PaymentMethodId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentMethodId", runtime.ParamLocationPath, paymentMethodId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/payment-methods/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingSetDefaultPaymentMethodV1Request generates requests for BillingSetDefaultPaymentMethodV1
func NewBillingSetDefaultPaymentMethodV1Request(server string, paymentMethodId PaymentMethodId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentMethodId", runtime.ParamLocationPath, paymentMethodId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/payment-methods/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingGetSubscriptionListV1Request generates requests for BillingGetSubscriptionListV1
func NewBillingGetSubscriptionListV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingCancelSubscriptionV1Request calls the generic BillingCancelSubscriptionV1 builder with application/json body
func NewBillingCancelSubscriptionV1Request(server string, subscriptionId SubscriptionId, body BillingCancelSubscriptionV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingCancelSubscriptionV1RequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewBillingCancelSubscriptionV1RequestWithBody generates requests for BillingCancelSubscriptionV1 with any type of body
func NewBillingCancelSubscriptionV1RequestWithBody(server string, subscriptionId SubscriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/billing/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDNSGetSnapshotListV1Request generates requests for DNSGetSnapshotListV1
func NewDNSGetSnapshotListV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDNSGetSnapshotV1Request generates requests for DNSGetSnapshotV1
func NewDNSGetSnapshotV1Request(server string, domain Domain, snapshotId SnapshotId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/snapshots/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDNSRestoreSnapshotV1Request generates requests for DNSRestoreSnapshotV1
func NewDNSRestoreSnapshotV1Request(server string, domain Domain, snapshotId SnapshotId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "snapshotId", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/snapshots/%s/%s/restore", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDNSDeleteZoneRecordsV1Request calls the generic DNSDeleteZoneRecordsV1 builder with application/json body
func NewDNSDeleteZoneRecordsV1Request(server string, domain Domain, body DNSDeleteZoneRecordsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDNSDeleteZoneRecordsV1RequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDNSDeleteZoneRecordsV1RequestWithBody generates requests for DNSDeleteZoneRecordsV1 with any type of body
func NewDNSDeleteZoneRecordsV1RequestWithBody(server string, domain Domain, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/zones/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDNSGetRecordsV1Request generates requests for DNSGetRecordsV1
func NewDNSGetRecordsV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/zones/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDNSUpdateZoneRecordsV1Request calls the generic DNSUpdateZoneRecordsV1 builder with application/json body
func NewDNSUpdateZoneRecordsV1Request(server string, domain Domain, body DNSUpdateZoneRecordsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDNSUpdateZoneRecordsV1RequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDNSUpdateZoneRecordsV1RequestWithBody generates requests for DNSUpdateZoneRecordsV1 with any type of body
func NewDNSUpdateZoneRecordsV1RequestWithBody(server string, domain Domain, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/zones/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDNSResetZoneRecordsV1Request calls the generic DNSResetZoneRecordsV1 builder with application/json body
func NewDNSResetZoneRecordsV1Request(server string, domain Domain, body DNSResetZoneRecordsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDNSResetZoneRecordsV1RequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDNSResetZoneRecordsV1RequestWithBody generates requests for DNSResetZoneRecordsV1 with any type of body
func NewDNSResetZoneRecordsV1RequestWithBody(server string, domain Domain, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/zones/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDNSValidateZoneRecordsV1Request calls the generic DNSValidateZoneRecordsV1 builder with application/json body
func NewDNSValidateZoneRecordsV1Request(server string, domain Domain, body DNSValidateZoneRecordsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDNSValidateZoneRecordsV1RequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDNSValidateZoneRecordsV1RequestWithBody generates requests for DNSValidateZoneRecordsV1 with any type of body
func NewDNSValidateZoneRecordsV1RequestWithBody(server string, domain Domain, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/v1/zones/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsCheckDomainAvailabilityV1Request calls the generic DomainsCheckDomainAvailabilityV1 builder with application/json body
func NewDomainsCheckDomainAvailabilityV1Request(server string, body DomainsCheckDomainAvailabilityV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsCheckDomainAvailabilityV1RequestWithBody(server, "application/json", bodyReader)
}

// NewDomainsCheckDomainAvailabilityV1RequestWithBody generates requests for DomainsCheckDomainAvailabilityV1 with any type of body
func NewDomainsCheckDomainAvailabilityV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/availability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsCreateForwardingDataV1Request calls the generic DomainsCreateForwardingDataV1 builder with application/json body
func NewDomainsCreateForwardingDataV1Request(server string, body DomainsCreateForwardingDataV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsCreateForwardingDataV1RequestWithBody(server, "application/json", bodyReader)
}

// NewDomainsCreateForwardingDataV1RequestWithBody generates requests for DomainsCreateForwardingDataV1 with any type of body
func NewDomainsCreateForwardingDataV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/forwarding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsDeleteForwardingDataV1Request generates requests for DomainsDeleteForwardingDataV1
func NewDomainsDeleteForwardingDataV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/forwarding/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsGetForwardingDataV1Request generates requests for DomainsGetForwardingDataV1
func NewDomainsGetForwardingDataV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/forwarding/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsGetDomainListV1Request generates requests for DomainsGetDomainListV1
func NewDomainsGetDomainListV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsPurchaseNewDomainV1Request calls the generic DomainsPurchaseNewDomainV1 builder with application/json body
func NewDomainsPurchaseNewDomainV1Request(server string, body DomainsPurchaseNewDomainV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsPurchaseNewDomainV1RequestWithBody(server, "application/json", bodyReader)
}

// NewDomainsPurchaseNewDomainV1RequestWithBody generates requests for DomainsPurchaseNewDomainV1 with any type of body
func NewDomainsPurchaseNewDomainV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsGetDomainV1Request generates requests for DomainsGetDomainV1
func NewDomainsGetDomainV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsDisableDomainLockV1Request generates requests for DomainsDisableDomainLockV1
func NewDomainsDisableDomainLockV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio/%s/domain-lock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsEnableDomainLockV1Request generates requests for DomainsEnableDomainLockV1
func NewDomainsEnableDomainLockV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio/%s/domain-lock", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsUpdateNameserversV1Request calls the generic DomainsUpdateNameserversV1 builder with application/json body
func NewDomainsUpdateNameserversV1Request(server string, domain Domain, body DomainsUpdateNameserversV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsUpdateNameserversV1RequestWithBody(server, domain, "application/json", bodyReader)
}

// NewDomainsUpdateNameserversV1RequestWithBody generates requests for DomainsUpdateNameserversV1 with any type of body
func NewDomainsUpdateNameserversV1RequestWithBody(server string, domain Domain, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio/%s/nameservers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsDisablePrivacyProtectionV1Request generates requests for DomainsDisablePrivacyProtectionV1
func NewDomainsDisablePrivacyProtectionV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio/%s/privacy-protection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsEnablePrivacyProtectionV1Request generates requests for DomainsEnablePrivacyProtectionV1
func NewDomainsEnablePrivacyProtectionV1Request(server string, domain Domain) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/portfolio/%s/privacy-protection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsGetWHOISProfileListV1Request generates requests for DomainsGetWHOISProfileListV1
func NewDomainsGetWHOISProfileListV1Request(server string, params *DomainsGetWHOISProfileListV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/whois")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Tld != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tld", runtime.ParamLocationQuery, *params.Tld); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsCreateWHOISProfileV1Request calls the generic DomainsCreateWHOISProfileV1 builder with application/json body
func NewDomainsCreateWHOISProfileV1Request(server string, body DomainsCreateWHOISProfileV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainsCreateWHOISProfileV1RequestWithBody(server, "application/json", bodyReader)
}

// NewDomainsCreateWHOISProfileV1RequestWithBody generates requests for DomainsCreateWHOISProfileV1 with any type of body
func NewDomainsCreateWHOISProfileV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/whois")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainsDeleteWHOISProfileV1Request generates requests for DomainsDeleteWHOISProfileV1
func NewDomainsDeleteWHOISProfileV1Request(server string, whoisId WhoisId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "whoisId", runtime.ParamLocationPath, whoisId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/whois/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsGetWHOISProfileV1Request generates requests for DomainsGetWHOISProfileV1
func NewDomainsGetWHOISProfileV1Request(server string, whoisId WhoisId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "whoisId", runtime.ParamLocationPath, whoisId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/whois/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainsGetWHOISProfileUsageV1Request generates requests for DomainsGetWHOISProfileUsageV1
func NewDomainsGetWHOISProfileUsageV1Request(server string, whoisId WhoisId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "whoisId", runtime.ParamLocationPath, whoisId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/domains/v1/whois/%s/usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetDataCentersListV1Request generates requests for VPSGetDataCentersListV1
func NewVPSGetDataCentersListV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/data-centers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetFirewallListV1Request generates requests for VPSGetFirewallListV1
func NewVPSGetFirewallListV1Request(server string, params *VPSGetFirewallListV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSCreateNewFirewallV1Request calls the generic VPSCreateNewFirewallV1 builder with application/json body
func NewVPSCreateNewFirewallV1Request(server string, body VPSCreateNewFirewallV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSCreateNewFirewallV1RequestWithBody(server, "application/json", bodyReader)
}

// NewVPSCreateNewFirewallV1RequestWithBody generates requests for VPSCreateNewFirewallV1 with any type of body
func NewVPSCreateNewFirewallV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSDeleteFirewallV1Request generates requests for VPSDeleteFirewallV1
func NewVPSDeleteFirewallV1Request(server string, firewallId FirewallId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetFirewallV1Request generates requests for VPSGetFirewallV1
func NewVPSGetFirewallV1Request(server string, firewallId FirewallId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSActivateFirewallV1Request generates requests for VPSActivateFirewallV1
func NewVPSActivateFirewallV1Request(server string, firewallId FirewallId, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s/activate/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSDeactivateFirewallV1Request generates requests for VPSDeactivateFirewallV1
func NewVPSDeactivateFirewallV1Request(server string, firewallId FirewallId, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s/deactivate/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSCreateFirewallRuleV1Request calls the generic VPSCreateFirewallRuleV1 builder with application/json body
func NewVPSCreateFirewallRuleV1Request(server string, firewallId FirewallId, body VPSCreateFirewallRuleV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSCreateFirewallRuleV1RequestWithBody(server, firewallId, "application/json", bodyReader)
}

// NewVPSCreateFirewallRuleV1RequestWithBody generates requests for VPSCreateFirewallRuleV1 with any type of body
func NewVPSCreateFirewallRuleV1RequestWithBody(server string, firewallId FirewallId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s/rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSDeleteFirewallRuleV1Request generates requests for VPSDeleteFirewallRuleV1
func NewVPSDeleteFirewallRuleV1Request(server string, firewallId FirewallId, ruleId RuleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s/rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSUpdateFirewallRuleV1Request calls the generic VPSUpdateFirewallRuleV1 builder with application/json body
func NewVPSUpdateFirewallRuleV1Request(server string, firewallId FirewallId, ruleId RuleId, body VPSUpdateFirewallRuleV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSUpdateFirewallRuleV1RequestWithBody(server, firewallId, ruleId, "application/json", bodyReader)
}

// NewVPSUpdateFirewallRuleV1RequestWithBody generates requests for VPSUpdateFirewallRuleV1 with any type of body
func NewVPSUpdateFirewallRuleV1RequestWithBody(server string, firewallId FirewallId, ruleId RuleId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s/rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSSyncFirewallV1Request generates requests for VPSSyncFirewallV1
func NewVPSSyncFirewallV1Request(server string, firewallId FirewallId, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewallId", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/firewall/%s/sync/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetPostInstallScriptListV1Request generates requests for VPSGetPostInstallScriptListV1
func NewVPSGetPostInstallScriptListV1Request(server string, params *VPSGetPostInstallScriptListV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/post-install-scripts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSCreatePostInstallScriptV1Request calls the generic VPSCreatePostInstallScriptV1 builder with application/json body
func NewVPSCreatePostInstallScriptV1Request(server string, body VPSCreatePostInstallScriptV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSCreatePostInstallScriptV1RequestWithBody(server, "application/json", bodyReader)
}

// NewVPSCreatePostInstallScriptV1RequestWithBody generates requests for VPSCreatePostInstallScriptV1 with any type of body
func NewVPSCreatePostInstallScriptV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/post-install-scripts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSDeleteAPostInstallScriptV1Request generates requests for VPSDeleteAPostInstallScriptV1
func NewVPSDeleteAPostInstallScriptV1Request(server string, postInstallScriptId PostInstallScriptId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postInstallScriptId", runtime.ParamLocationPath, postInstallScriptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/post-install-scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetPostInstallScriptV1Request generates requests for VPSGetPostInstallScriptV1
func NewVPSGetPostInstallScriptV1Request(server string, postInstallScriptId PostInstallScriptId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postInstallScriptId", runtime.ParamLocationPath, postInstallScriptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/post-install-scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSUpdatePostInstallScriptV1Request calls the generic VPSUpdatePostInstallScriptV1 builder with application/json body
func NewVPSUpdatePostInstallScriptV1Request(server string, postInstallScriptId PostInstallScriptId, body VPSUpdatePostInstallScriptV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSUpdatePostInstallScriptV1RequestWithBody(server, postInstallScriptId, "application/json", bodyReader)
}

// NewVPSUpdatePostInstallScriptV1RequestWithBody generates requests for VPSUpdatePostInstallScriptV1 with any type of body
func NewVPSUpdatePostInstallScriptV1RequestWithBody(server string, postInstallScriptId PostInstallScriptId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postInstallScriptId", runtime.ParamLocationPath, postInstallScriptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/post-install-scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSGetPublicKeyListV1Request generates requests for VPSGetPublicKeyListV1
func NewVPSGetPublicKeyListV1Request(server string, params *VPSGetPublicKeyListV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/public-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSCreateNewPublicKeyV1Request calls the generic VPSCreateNewPublicKeyV1 builder with application/json body
func NewVPSCreateNewPublicKeyV1Request(server string, body VPSCreateNewPublicKeyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSCreateNewPublicKeyV1RequestWithBody(server, "application/json", bodyReader)
}

// NewVPSCreateNewPublicKeyV1RequestWithBody generates requests for VPSCreateNewPublicKeyV1 with any type of body
func NewVPSCreateNewPublicKeyV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/public-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSAttachPublicKeyV1Request calls the generic VPSAttachPublicKeyV1 builder with application/json body
func NewVPSAttachPublicKeyV1Request(server string, virtualMachineId VirtualMachineId, body VPSAttachPublicKeyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSAttachPublicKeyV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSAttachPublicKeyV1RequestWithBody generates requests for VPSAttachPublicKeyV1 with any type of body
func NewVPSAttachPublicKeyV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/public-keys/attach/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSDeleteAPublicKeyV1Request generates requests for VPSDeleteAPublicKeyV1
func NewVPSDeleteAPublicKeyV1Request(server string, publicKeyId PublicKeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "publicKeyId", runtime.ParamLocationPath, publicKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/public-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetTemplateListV1Request generates requests for VPSGetTemplateListV1
func NewVPSGetTemplateListV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/templates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetTemplateV1Request generates requests for VPSGetTemplateV1
func NewVPSGetTemplateV1Request(server string, templateId TemplateId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "templateId", runtime.ParamLocationPath, templateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/templates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetVirtualMachineListV1Request generates requests for VPSGetVirtualMachineListV1
func NewVPSGetVirtualMachineListV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSPurchaseNewVirtualMachineV1Request calls the generic VPSPurchaseNewVirtualMachineV1 builder with application/json body
func NewVPSPurchaseNewVirtualMachineV1Request(server string, body VPSPurchaseNewVirtualMachineV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSPurchaseNewVirtualMachineV1RequestWithBody(server, "application/json", bodyReader)
}

// NewVPSPurchaseNewVirtualMachineV1RequestWithBody generates requests for VPSPurchaseNewVirtualMachineV1 with any type of body
func NewVPSPurchaseNewVirtualMachineV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSGetVirtualMachineV1Request generates requests for VPSGetVirtualMachineV1
func NewVPSGetVirtualMachineV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetActionListV1Request generates requests for VPSGetActionListV1
func NewVPSGetActionListV1Request(server string, virtualMachineId VirtualMachineId, params *VPSGetActionListV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetActionV1Request generates requests for VPSGetActionV1
func NewVPSGetActionV1Request(server string, virtualMachineId VirtualMachineId, actionId ActionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetBackupListV1Request generates requests for VPSGetBackupListV1
func NewVPSGetBackupListV1Request(server string, virtualMachineId VirtualMachineId, params *VPSGetBackupListV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/backups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSDeleteBackupV1Request generates requests for VPSDeleteBackupV1
func NewVPSDeleteBackupV1Request(server string, virtualMachineId VirtualMachineId, backupId BackupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "backupId", runtime.ParamLocationPath, backupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/backups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSRestoreBackupV1Request generates requests for VPSRestoreBackupV1
func NewVPSRestoreBackupV1Request(server string, virtualMachineId VirtualMachineId, backupId BackupId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "backupId", runtime.ParamLocationPath, backupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/backups/%s/restore", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSResetHostnameV1Request generates requests for VPSResetHostnameV1
func NewVPSResetHostnameV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/hostname", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSSetHostnameV1Request calls the generic VPSSetHostnameV1 builder with application/json body
func NewVPSSetHostnameV1Request(server string, virtualMachineId VirtualMachineId, body VPSSetHostnameV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSSetHostnameV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSSetHostnameV1RequestWithBody generates requests for VPSSetHostnameV1 with any type of body
func NewVPSSetHostnameV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/hostname", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSGetMetricsV1Request generates requests for VPSGetMetricsV1
func NewVPSGetMetricsV1Request(server string, virtualMachineId VirtualMachineId, params *VPSGetMetricsV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_from", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_to", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSUninstallMonarxV1Request generates requests for VPSUninstallMonarxV1
func NewVPSUninstallMonarxV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/monarx", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetScanMetricsV1Request generates requests for VPSGetScanMetricsV1
func NewVPSGetScanMetricsV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/monarx", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSInstallMonarxV1Request generates requests for VPSInstallMonarxV1
func NewVPSInstallMonarxV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/monarx", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSSetNameserversV1Request calls the generic VPSSetNameserversV1 builder with application/json body
func NewVPSSetNameserversV1Request(server string, virtualMachineId VirtualMachineId, body VPSSetNameserversV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSSetNameserversV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSSetNameserversV1RequestWithBody generates requests for VPSSetNameserversV1 with any type of body
func NewVPSSetNameserversV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/nameservers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSSetPanelPasswordV1Request calls the generic VPSSetPanelPasswordV1 builder with application/json body
func NewVPSSetPanelPasswordV1Request(server string, virtualMachineId VirtualMachineId, body VPSSetPanelPasswordV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSSetPanelPasswordV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSSetPanelPasswordV1RequestWithBody generates requests for VPSSetPanelPasswordV1 with any type of body
func NewVPSSetPanelPasswordV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/panel-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSDeletePTRRecordV1Request generates requests for VPSDeletePTRRecordV1
func NewVPSDeletePTRRecordV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/ptr", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSCreatePTRRecordV1Request generates requests for VPSCreatePTRRecordV1
func NewVPSCreatePTRRecordV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/ptr", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetAttachedPublicKeysV1Request generates requests for VPSGetAttachedPublicKeysV1
func NewVPSGetAttachedPublicKeysV1Request(server string, virtualMachineId VirtualMachineId, params *VPSGetAttachedPublicKeysV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/public-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSStopRecoveryModeV1Request generates requests for VPSStopRecoveryModeV1
func NewVPSStopRecoveryModeV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/recovery", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSStartRecoveryModeV1Request calls the generic VPSStartRecoveryModeV1 builder with application/json body
func NewVPSStartRecoveryModeV1Request(server string, virtualMachineId VirtualMachineId, body VPSStartRecoveryModeV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSStartRecoveryModeV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSStartRecoveryModeV1RequestWithBody generates requests for VPSStartRecoveryModeV1 with any type of body
func NewVPSStartRecoveryModeV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/recovery", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSRecreateVirtualMachineV1Request calls the generic VPSRecreateVirtualMachineV1 builder with application/json body
func NewVPSRecreateVirtualMachineV1Request(server string, virtualMachineId VirtualMachineId, body VPSRecreateVirtualMachineV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSRecreateVirtualMachineV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSRecreateVirtualMachineV1RequestWithBody generates requests for VPSRecreateVirtualMachineV1 with any type of body
func NewVPSRecreateVirtualMachineV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/recreate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSRestartVirtualMachineV1Request generates requests for VPSRestartVirtualMachineV1
func NewVPSRestartVirtualMachineV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/restart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSSetRootPasswordV1Request calls the generic VPSSetRootPasswordV1 builder with application/json body
func NewVPSSetRootPasswordV1Request(server string, virtualMachineId VirtualMachineId, body VPSSetRootPasswordV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSSetRootPasswordV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSSetRootPasswordV1RequestWithBody generates requests for VPSSetRootPasswordV1 with any type of body
func NewVPSSetRootPasswordV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/root-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSSetupNewVirtualMachineV1Request calls the generic VPSSetupNewVirtualMachineV1 builder with application/json body
func NewVPSSetupNewVirtualMachineV1Request(server string, virtualMachineId VirtualMachineId, body VPSSetupNewVirtualMachineV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVPSSetupNewVirtualMachineV1RequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewVPSSetupNewVirtualMachineV1RequestWithBody generates requests for VPSSetupNewVirtualMachineV1 with any type of body
func NewVPSSetupNewVirtualMachineV1RequestWithBody(server string, virtualMachineId VirtualMachineId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/setup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVPSDeleteSnapshotV1Request generates requests for VPSDeleteSnapshotV1
func NewVPSDeleteSnapshotV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSGetSnapshotV1Request generates requests for VPSGetSnapshotV1
func NewVPSGetSnapshotV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSCreateSnapshotV1Request generates requests for VPSCreateSnapshotV1
func NewVPSCreateSnapshotV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/snapshot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSRestoreSnapshotV1Request generates requests for VPSRestoreSnapshotV1
func NewVPSRestoreSnapshotV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/snapshot/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSStartVirtualMachineV1Request generates requests for VPSStartVirtualMachineV1
func NewVPSStartVirtualMachineV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVPSStopVirtualMachineV1Request generates requests for VPSStopVirtualMachineV1
func NewVPSStopVirtualMachineV1Request(server string, virtualMachineId VirtualMachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualMachineId", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/vps/v1/virtual-machines/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BillingGetCatalogItemListV1WithResponse request
	BillingGetCatalogItemListV1WithResponse(ctx context.Context, params *BillingGetCatalogItemListV1Params, reqEditors ...RequestEditorFn) (*BillingGetCatalogItemListV1Response, error)

	// BillingCreateNewServiceOrderV1WithBodyWithResponse request with any body
	BillingCreateNewServiceOrderV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateNewServiceOrderV1Response, error)

	BillingCreateNewServiceOrderV1WithResponse(ctx context.Context, body BillingCreateNewServiceOrderV1JSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateNewServiceOrderV1Response, error)

	// BillingGetPaymentMethodListV1WithResponse request
	BillingGetPaymentMethodListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BillingGetPaymentMethodListV1Response, error)

	// BillingDeletePaymentMethodV1WithResponse request
	BillingDeletePaymentMethodV1WithResponse(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*BillingDeletePaymentMethodV1Response, error)

	// BillingSetDefaultPaymentMethodV1WithResponse request
	BillingSetDefaultPaymentMethodV1WithResponse(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*BillingSetDefaultPaymentMethodV1Response, error)

	// BillingGetSubscriptionListV1WithResponse request
	BillingGetSubscriptionListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BillingGetSubscriptionListV1Response, error)

	// BillingCancelSubscriptionV1WithBodyWithResponse request with any body
	BillingCancelSubscriptionV1WithBodyWithResponse(ctx context.Context, subscriptionId SubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCancelSubscriptionV1Response, error)

	BillingCancelSubscriptionV1WithResponse(ctx context.Context, subscriptionId SubscriptionId, body BillingCancelSubscriptionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCancelSubscriptionV1Response, error)

	// DNSGetSnapshotListV1WithResponse request
	DNSGetSnapshotListV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DNSGetSnapshotListV1Response, error)

	// DNSGetSnapshotV1WithResponse request
	DNSGetSnapshotV1WithResponse(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*DNSGetSnapshotV1Response, error)

	// DNSRestoreSnapshotV1WithResponse request
	DNSRestoreSnapshotV1WithResponse(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*DNSRestoreSnapshotV1Response, error)

	// DNSDeleteZoneRecordsV1WithBodyWithResponse request with any body
	DNSDeleteZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSDeleteZoneRecordsV1Response, error)

	DNSDeleteZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSDeleteZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSDeleteZoneRecordsV1Response, error)

	// DNSGetRecordsV1WithResponse request
	DNSGetRecordsV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DNSGetRecordsV1Response, error)

	// DNSUpdateZoneRecordsV1WithBodyWithResponse request with any body
	DNSUpdateZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSUpdateZoneRecordsV1Response, error)

	DNSUpdateZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSUpdateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSUpdateZoneRecordsV1Response, error)

	// DNSResetZoneRecordsV1WithBodyWithResponse request with any body
	DNSResetZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSResetZoneRecordsV1Response, error)

	DNSResetZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSResetZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSResetZoneRecordsV1Response, error)

	// DNSValidateZoneRecordsV1WithBodyWithResponse request with any body
	DNSValidateZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSValidateZoneRecordsV1Response, error)

	DNSValidateZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSValidateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSValidateZoneRecordsV1Response, error)

	// DomainsCheckDomainAvailabilityV1WithBodyWithResponse request with any body
	DomainsCheckDomainAvailabilityV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCheckDomainAvailabilityV1Response, error)

	DomainsCheckDomainAvailabilityV1WithResponse(ctx context.Context, body DomainsCheckDomainAvailabilityV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCheckDomainAvailabilityV1Response, error)

	// DomainsCreateForwardingDataV1WithBodyWithResponse request with any body
	DomainsCreateForwardingDataV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateForwardingDataV1Response, error)

	DomainsCreateForwardingDataV1WithResponse(ctx context.Context, body DomainsCreateForwardingDataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateForwardingDataV1Response, error)

	// DomainsDeleteForwardingDataV1WithResponse request
	DomainsDeleteForwardingDataV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsDeleteForwardingDataV1Response, error)

	// DomainsGetForwardingDataV1WithResponse request
	DomainsGetForwardingDataV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsGetForwardingDataV1Response, error)

	// DomainsGetDomainListV1WithResponse request
	DomainsGetDomainListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DomainsGetDomainListV1Response, error)

	// DomainsPurchaseNewDomainV1WithBodyWithResponse request with any body
	DomainsPurchaseNewDomainV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsPurchaseNewDomainV1Response, error)

	DomainsPurchaseNewDomainV1WithResponse(ctx context.Context, body DomainsPurchaseNewDomainV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsPurchaseNewDomainV1Response, error)

	// DomainsGetDomainV1WithResponse request
	DomainsGetDomainV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsGetDomainV1Response, error)

	// DomainsDisableDomainLockV1WithResponse request
	DomainsDisableDomainLockV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsDisableDomainLockV1Response, error)

	// DomainsEnableDomainLockV1WithResponse request
	DomainsEnableDomainLockV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsEnableDomainLockV1Response, error)

	// DomainsUpdateNameserversV1WithBodyWithResponse request with any body
	DomainsUpdateNameserversV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsUpdateNameserversV1Response, error)

	DomainsUpdateNameserversV1WithResponse(ctx context.Context, domain Domain, body DomainsUpdateNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateNameserversV1Response, error)

	// DomainsDisablePrivacyProtectionV1WithResponse request
	DomainsDisablePrivacyProtectionV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsDisablePrivacyProtectionV1Response, error)

	// DomainsEnablePrivacyProtectionV1WithResponse request
	DomainsEnablePrivacyProtectionV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsEnablePrivacyProtectionV1Response, error)

	// DomainsGetWHOISProfileListV1WithResponse request
	DomainsGetWHOISProfileListV1WithResponse(ctx context.Context, params *DomainsGetWHOISProfileListV1Params, reqEditors ...RequestEditorFn) (*DomainsGetWHOISProfileListV1Response, error)

	// DomainsCreateWHOISProfileV1WithBodyWithResponse request with any body
	DomainsCreateWHOISProfileV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateWHOISProfileV1Response, error)

	DomainsCreateWHOISProfileV1WithResponse(ctx context.Context, body DomainsCreateWHOISProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateWHOISProfileV1Response, error)

	// DomainsDeleteWHOISProfileV1WithResponse request
	DomainsDeleteWHOISProfileV1WithResponse(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*DomainsDeleteWHOISProfileV1Response, error)

	// DomainsGetWHOISProfileV1WithResponse request
	DomainsGetWHOISProfileV1WithResponse(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*DomainsGetWHOISProfileV1Response, error)

	// DomainsGetWHOISProfileUsageV1WithResponse request
	DomainsGetWHOISProfileUsageV1WithResponse(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*DomainsGetWHOISProfileUsageV1Response, error)

	// VPSGetDataCentersListV1WithResponse request
	VPSGetDataCentersListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VPSGetDataCentersListV1Response, error)

	// VPSGetFirewallListV1WithResponse request
	VPSGetFirewallListV1WithResponse(ctx context.Context, params *VPSGetFirewallListV1Params, reqEditors ...RequestEditorFn) (*VPSGetFirewallListV1Response, error)

	// VPSCreateNewFirewallV1WithBodyWithResponse request with any body
	VPSCreateNewFirewallV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreateNewFirewallV1Response, error)

	VPSCreateNewFirewallV1WithResponse(ctx context.Context, body VPSCreateNewFirewallV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreateNewFirewallV1Response, error)

	// VPSDeleteFirewallV1WithResponse request
	VPSDeleteFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*VPSDeleteFirewallV1Response, error)

	// VPSGetFirewallV1WithResponse request
	VPSGetFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*VPSGetFirewallV1Response, error)

	// VPSActivateFirewallV1WithResponse request
	VPSActivateFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSActivateFirewallV1Response, error)

	// VPSDeactivateFirewallV1WithResponse request
	VPSDeactivateFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSDeactivateFirewallV1Response, error)

	// VPSCreateFirewallRuleV1WithBodyWithResponse request with any body
	VPSCreateFirewallRuleV1WithBodyWithResponse(ctx context.Context, firewallId FirewallId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreateFirewallRuleV1Response, error)

	VPSCreateFirewallRuleV1WithResponse(ctx context.Context, firewallId FirewallId, body VPSCreateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreateFirewallRuleV1Response, error)

	// VPSDeleteFirewallRuleV1WithResponse request
	VPSDeleteFirewallRuleV1WithResponse(ctx context.Context, firewallId FirewallId, ruleId RuleId, reqEditors ...RequestEditorFn) (*VPSDeleteFirewallRuleV1Response, error)

	// VPSUpdateFirewallRuleV1WithBodyWithResponse request with any body
	VPSUpdateFirewallRuleV1WithBodyWithResponse(ctx context.Context, firewallId FirewallId, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSUpdateFirewallRuleV1Response, error)

	VPSUpdateFirewallRuleV1WithResponse(ctx context.Context, firewallId FirewallId, ruleId RuleId, body VPSUpdateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSUpdateFirewallRuleV1Response, error)

	// VPSSyncFirewallV1WithResponse request
	VPSSyncFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSSyncFirewallV1Response, error)

	// VPSGetPostInstallScriptListV1WithResponse request
	VPSGetPostInstallScriptListV1WithResponse(ctx context.Context, params *VPSGetPostInstallScriptListV1Params, reqEditors ...RequestEditorFn) (*VPSGetPostInstallScriptListV1Response, error)

	// VPSCreatePostInstallScriptV1WithBodyWithResponse request with any body
	VPSCreatePostInstallScriptV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreatePostInstallScriptV1Response, error)

	VPSCreatePostInstallScriptV1WithResponse(ctx context.Context, body VPSCreatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreatePostInstallScriptV1Response, error)

	// VPSDeleteAPostInstallScriptV1WithResponse request
	VPSDeleteAPostInstallScriptV1WithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*VPSDeleteAPostInstallScriptV1Response, error)

	// VPSGetPostInstallScriptV1WithResponse request
	VPSGetPostInstallScriptV1WithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*VPSGetPostInstallScriptV1Response, error)

	// VPSUpdatePostInstallScriptV1WithBodyWithResponse request with any body
	VPSUpdatePostInstallScriptV1WithBodyWithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSUpdatePostInstallScriptV1Response, error)

	VPSUpdatePostInstallScriptV1WithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, body VPSUpdatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSUpdatePostInstallScriptV1Response, error)

	// VPSGetPublicKeyListV1WithResponse request
	VPSGetPublicKeyListV1WithResponse(ctx context.Context, params *VPSGetPublicKeyListV1Params, reqEditors ...RequestEditorFn) (*VPSGetPublicKeyListV1Response, error)

	// VPSCreateNewPublicKeyV1WithBodyWithResponse request with any body
	VPSCreateNewPublicKeyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreateNewPublicKeyV1Response, error)

	VPSCreateNewPublicKeyV1WithResponse(ctx context.Context, body VPSCreateNewPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreateNewPublicKeyV1Response, error)

	// VPSAttachPublicKeyV1WithBodyWithResponse request with any body
	VPSAttachPublicKeyV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSAttachPublicKeyV1Response, error)

	VPSAttachPublicKeyV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSAttachPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSAttachPublicKeyV1Response, error)

	// VPSDeleteAPublicKeyV1WithResponse request
	VPSDeleteAPublicKeyV1WithResponse(ctx context.Context, publicKeyId PublicKeyId, reqEditors ...RequestEditorFn) (*VPSDeleteAPublicKeyV1Response, error)

	// VPSGetTemplateListV1WithResponse request
	VPSGetTemplateListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VPSGetTemplateListV1Response, error)

	// VPSGetTemplateV1WithResponse request
	VPSGetTemplateV1WithResponse(ctx context.Context, templateId TemplateId, reqEditors ...RequestEditorFn) (*VPSGetTemplateV1Response, error)

	// VPSGetVirtualMachineListV1WithResponse request
	VPSGetVirtualMachineListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VPSGetVirtualMachineListV1Response, error)

	// VPSPurchaseNewVirtualMachineV1WithBodyWithResponse request with any body
	VPSPurchaseNewVirtualMachineV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSPurchaseNewVirtualMachineV1Response, error)

	VPSPurchaseNewVirtualMachineV1WithResponse(ctx context.Context, body VPSPurchaseNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSPurchaseNewVirtualMachineV1Response, error)

	// VPSGetVirtualMachineV1WithResponse request
	VPSGetVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSGetVirtualMachineV1Response, error)

	// VPSGetActionListV1WithResponse request
	VPSGetActionListV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetActionListV1Params, reqEditors ...RequestEditorFn) (*VPSGetActionListV1Response, error)

	// VPSGetActionV1WithResponse request
	VPSGetActionV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, actionId ActionId, reqEditors ...RequestEditorFn) (*VPSGetActionV1Response, error)

	// VPSGetBackupListV1WithResponse request
	VPSGetBackupListV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetBackupListV1Params, reqEditors ...RequestEditorFn) (*VPSGetBackupListV1Response, error)

	// VPSDeleteBackupV1WithResponse request
	VPSDeleteBackupV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*VPSDeleteBackupV1Response, error)

	// VPSRestoreBackupV1WithResponse request
	VPSRestoreBackupV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*VPSRestoreBackupV1Response, error)

	// VPSResetHostnameV1WithResponse request
	VPSResetHostnameV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSResetHostnameV1Response, error)

	// VPSSetHostnameV1WithBodyWithResponse request with any body
	VPSSetHostnameV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetHostnameV1Response, error)

	VPSSetHostnameV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetHostnameV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetHostnameV1Response, error)

	// VPSGetMetricsV1WithResponse request
	VPSGetMetricsV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetMetricsV1Params, reqEditors ...RequestEditorFn) (*VPSGetMetricsV1Response, error)

	// VPSUninstallMonarxV1WithResponse request
	VPSUninstallMonarxV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSUninstallMonarxV1Response, error)

	// VPSGetScanMetricsV1WithResponse request
	VPSGetScanMetricsV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSGetScanMetricsV1Response, error)

	// VPSInstallMonarxV1WithResponse request
	VPSInstallMonarxV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSInstallMonarxV1Response, error)

	// VPSSetNameserversV1WithBodyWithResponse request with any body
	VPSSetNameserversV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetNameserversV1Response, error)

	VPSSetNameserversV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetNameserversV1Response, error)

	// VPSSetPanelPasswordV1WithBodyWithResponse request with any body
	VPSSetPanelPasswordV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetPanelPasswordV1Response, error)

	VPSSetPanelPasswordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetPanelPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetPanelPasswordV1Response, error)

	// VPSDeletePTRRecordV1WithResponse request
	VPSDeletePTRRecordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSDeletePTRRecordV1Response, error)

	// VPSCreatePTRRecordV1WithResponse request
	VPSCreatePTRRecordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSCreatePTRRecordV1Response, error)

	// VPSGetAttachedPublicKeysV1WithResponse request
	VPSGetAttachedPublicKeysV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetAttachedPublicKeysV1Params, reqEditors ...RequestEditorFn) (*VPSGetAttachedPublicKeysV1Response, error)

	// VPSStopRecoveryModeV1WithResponse request
	VPSStopRecoveryModeV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSStopRecoveryModeV1Response, error)

	// VPSStartRecoveryModeV1WithBodyWithResponse request with any body
	VPSStartRecoveryModeV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSStartRecoveryModeV1Response, error)

	VPSStartRecoveryModeV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSStartRecoveryModeV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSStartRecoveryModeV1Response, error)

	// VPSRecreateVirtualMachineV1WithBodyWithResponse request with any body
	VPSRecreateVirtualMachineV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSRecreateVirtualMachineV1Response, error)

	VPSRecreateVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSRecreateVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSRecreateVirtualMachineV1Response, error)

	// VPSRestartVirtualMachineV1WithResponse request
	VPSRestartVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSRestartVirtualMachineV1Response, error)

	// VPSSetRootPasswordV1WithBodyWithResponse request with any body
	VPSSetRootPasswordV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetRootPasswordV1Response, error)

	VPSSetRootPasswordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetRootPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetRootPasswordV1Response, error)

	// VPSSetupNewVirtualMachineV1WithBodyWithResponse request with any body
	VPSSetupNewVirtualMachineV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetupNewVirtualMachineV1Response, error)

	VPSSetupNewVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetupNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetupNewVirtualMachineV1Response, error)

	// VPSDeleteSnapshotV1WithResponse request
	VPSDeleteSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSDeleteSnapshotV1Response, error)

	// VPSGetSnapshotV1WithResponse request
	VPSGetSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSGetSnapshotV1Response, error)

	// VPSCreateSnapshotV1WithResponse request
	VPSCreateSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSCreateSnapshotV1Response, error)

	// VPSRestoreSnapshotV1WithResponse request
	VPSRestoreSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSRestoreSnapshotV1Response, error)

	// VPSStartVirtualMachineV1WithResponse request
	VPSStartVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSStartVirtualMachineV1Response, error)

	// VPSStopVirtualMachineV1WithResponse request
	VPSStopVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSStopVirtualMachineV1Response, error)
}

type BillingGetCatalogItemListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1CatalogCatalogItemCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingGetCatalogItemListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingGetCatalogItemListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingCreateNewServiceOrderV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1OrderOrderResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingCreateNewServiceOrderV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingCreateNewServiceOrderV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingGetPaymentMethodListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1PaymentMethodPaymentMethodCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingGetPaymentMethodListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingGetPaymentMethodListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingDeletePaymentMethodV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingDeletePaymentMethodV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingDeletePaymentMethodV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingSetDefaultPaymentMethodV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingSetDefaultPaymentMethodV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingSetDefaultPaymentMethodV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingGetSubscriptionListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1SubscriptionSubscriptionCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingGetSubscriptionListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingGetSubscriptionListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingCancelSubscriptionV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r BillingCancelSubscriptionV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingCancelSubscriptionV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSGetSnapshotListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSV1SnapshotSnapshotCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSGetSnapshotListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSGetSnapshotListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSGetSnapshotV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSV1SnapshotSnapshotWithContentResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSGetSnapshotV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSGetSnapshotV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSRestoreSnapshotV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSRestoreSnapshotV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSRestoreSnapshotV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSDeleteZoneRecordsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSDeleteZoneRecordsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSDeleteZoneRecordsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSGetRecordsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSV1ZoneRecordCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSGetRecordsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSGetRecordsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSUpdateZoneRecordsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSUpdateZoneRecordsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSUpdateZoneRecordsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSResetZoneRecordsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSResetZoneRecordsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSResetZoneRecordsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DNSValidateZoneRecordsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DNSValidateZoneRecordsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DNSValidateZoneRecordsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsCheckDomainAvailabilityV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1AvailabilityAvailabilityCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsCheckDomainAvailabilityV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsCheckDomainAvailabilityV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsCreateForwardingDataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1ForwardingForwardingResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsCreateForwardingDataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsCreateForwardingDataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDeleteForwardingDataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsDeleteForwardingDataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDeleteForwardingDataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsGetForwardingDataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1ForwardingForwardingResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsGetForwardingDataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsGetForwardingDataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsGetDomainListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1DomainDomainCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsGetDomainListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsGetDomainListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsPurchaseNewDomainV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1OrderOrderResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsPurchaseNewDomainV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsPurchaseNewDomainV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsGetDomainV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1DomainDomainExtendedResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsGetDomainV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsGetDomainV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDisableDomainLockV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsDisableDomainLockV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDisableDomainLockV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsEnableDomainLockV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsEnableDomainLockV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsEnableDomainLockV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsUpdateNameserversV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsUpdateNameserversV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsUpdateNameserversV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDisablePrivacyProtectionV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsDisablePrivacyProtectionV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDisablePrivacyProtectionV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsEnablePrivacyProtectionV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsEnablePrivacyProtectionV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsEnablePrivacyProtectionV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsGetWHOISProfileListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1WHOISProfileCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsGetWHOISProfileListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsGetWHOISProfileListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsCreateWHOISProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1WHOISProfileResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsCreateWHOISProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsCreateWHOISProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsDeleteWHOISProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsDeleteWHOISProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsDeleteWHOISProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsGetWHOISProfileV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1WHOISProfileResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsGetWHOISProfileV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsGetWHOISProfileV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainsGetWHOISProfileUsageV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DomainsV1WHOISProfileUsageResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r DomainsGetWHOISProfileUsageV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainsGetWHOISProfileUsageV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetDataCentersListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1DataCenterDataCenterCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetDataCentersListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetDataCentersListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetFirewallListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Array of [`VPS.V1.Firewall.FirewallResource`](#model/vpsv1firewallfirewallresource)
		Data *VPSV1FirewallFirewallCollection  `json:"data,omitempty"`
		Meta *CommonSchemaPaginationMetaSchema `json:"meta,omitempty"`
	}
	JSON401 *CommonResponseUnauthorizedResponse
	JSON500 *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetFirewallListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetFirewallListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSCreateNewFirewallV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1FirewallFirewallResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSCreateNewFirewallV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSCreateNewFirewallV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeleteFirewallV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeleteFirewallV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeleteFirewallV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetFirewallV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1FirewallFirewallResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetFirewallV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetFirewallV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSActivateFirewallV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSActivateFirewallV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSActivateFirewallV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeactivateFirewallV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeactivateFirewallV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeactivateFirewallV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSCreateFirewallRuleV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1FirewallFirewallRuleResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSCreateFirewallRuleV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSCreateFirewallRuleV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeleteFirewallRuleV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeleteFirewallRuleV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeleteFirewallRuleV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSUpdateFirewallRuleV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1FirewallFirewallRuleResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSUpdateFirewallRuleV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSUpdateFirewallRuleV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSSyncFirewallV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSSyncFirewallV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSSyncFirewallV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetPostInstallScriptListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Array of [`VPS.V1.PostInstallScript.PostInstallScriptResource`](#model/vpsv1postinstallscriptpostinstallscriptresource)
		Data *VPSV1PostInstallScriptPostInstallScriptCollection `json:"data,omitempty"`
		Meta *CommonSchemaPaginationMetaSchema                  `json:"meta,omitempty"`
	}
	JSON401 *CommonResponseUnauthorizedResponse
	JSON500 *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetPostInstallScriptListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetPostInstallScriptListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSCreatePostInstallScriptV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1PostInstallScriptPostInstallScriptResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSCreatePostInstallScriptV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSCreatePostInstallScriptV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeleteAPostInstallScriptV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeleteAPostInstallScriptV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeleteAPostInstallScriptV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetPostInstallScriptV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1PostInstallScriptPostInstallScriptResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetPostInstallScriptV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetPostInstallScriptV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSUpdatePostInstallScriptV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1PostInstallScriptPostInstallScriptResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSUpdatePostInstallScriptV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSUpdatePostInstallScriptV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetPublicKeyListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Array of [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource)
		Data *VPSV1PublicKeyPublicKeyCollection `json:"data,omitempty"`
		Meta *CommonSchemaPaginationMetaSchema  `json:"meta,omitempty"`
	}
	JSON401 *CommonResponseUnauthorizedResponse
	JSON500 *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetPublicKeyListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetPublicKeyListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSCreateNewPublicKeyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1PublicKeyPublicKeyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSCreateNewPublicKeyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSCreateNewPublicKeyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSAttachPublicKeyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSAttachPublicKeyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSAttachPublicKeyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeleteAPublicKeyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeleteAPublicKeyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeleteAPublicKeyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetTemplateListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1TemplateTemplateCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetTemplateListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetTemplateListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetTemplateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1TemplateTemplateResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetTemplateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetTemplateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetVirtualMachineListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1VirtualMachineVirtualMachineCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetVirtualMachineListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetVirtualMachineListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSPurchaseNewVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingV1OrderOrderResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSPurchaseNewVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSPurchaseNewVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1VirtualMachineVirtualMachineResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetActionListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Array of [`VPS.V1.Action.ActionResource`](#model/vpsv1actionactionresource)
		Data *VPSV1ActionActionCollection      `json:"data,omitempty"`
		Meta *CommonSchemaPaginationMetaSchema `json:"meta,omitempty"`
	}
	JSON401 *CommonResponseUnauthorizedResponse
	JSON500 *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetActionListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetActionListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetActionV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetActionV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetActionV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetBackupListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Array of [`VPS.V1.Backup.BackupResource`](#model/vpsv1backupbackupresource)
		Data *VPSV1BackupBackupCollection      `json:"data,omitempty"`
		Meta *CommonSchemaPaginationMetaSchema `json:"meta,omitempty"`
	}
	JSON401 *CommonResponseUnauthorizedResponse
	JSON500 *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetBackupListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetBackupListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeleteBackupV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonSuccessEmptyResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeleteBackupV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeleteBackupV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSRestoreBackupV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSRestoreBackupV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSRestoreBackupV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSResetHostnameV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSResetHostnameV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSResetHostnameV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSSetHostnameV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSSetHostnameV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSSetHostnameV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetMetricsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1MetricsMetricsCollection
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetMetricsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetMetricsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSUninstallMonarxV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSUninstallMonarxV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSUninstallMonarxV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetScanMetricsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1MalwareMetricsResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetScanMetricsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetScanMetricsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSInstallMonarxV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSInstallMonarxV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSInstallMonarxV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSSetNameserversV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSSetNameserversV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSSetNameserversV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSSetPanelPasswordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSSetPanelPasswordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSSetPanelPasswordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeletePTRRecordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeletePTRRecordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeletePTRRecordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSCreatePTRRecordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSCreatePTRRecordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSCreatePTRRecordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetAttachedPublicKeysV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Array of [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource)
		Data *VPSV1PublicKeyPublicKeyCollection `json:"data,omitempty"`
		Meta *CommonSchemaPaginationMetaSchema  `json:"meta,omitempty"`
	}
	JSON401 *CommonResponseUnauthorizedResponse
	JSON500 *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetAttachedPublicKeysV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetAttachedPublicKeysV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSStopRecoveryModeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSStopRecoveryModeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSStopRecoveryModeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSStartRecoveryModeV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSStartRecoveryModeV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSStartRecoveryModeV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSRecreateVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSRecreateVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSRecreateVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSRestartVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSRestartVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSRestartVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSSetRootPasswordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSSetRootPasswordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSSetRootPasswordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSSetupNewVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1VirtualMachineVirtualMachineResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON422      *CommonResponseUnprocessableContentResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSSetupNewVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSSetupNewVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSDeleteSnapshotV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSDeleteSnapshotV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSDeleteSnapshotV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSGetSnapshotV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1SnapshotSnapshotResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSGetSnapshotV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSGetSnapshotV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSCreateSnapshotV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSCreateSnapshotV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSCreateSnapshotV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSRestoreSnapshotV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSRestoreSnapshotV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSRestoreSnapshotV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSStartVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSStartVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSStartVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VPSStopVirtualMachineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VPSV1ActionActionResource
	JSON401      *CommonResponseUnauthorizedResponse
	JSON500      *CommonResponseErrorResponse
}

// Status returns HTTPResponse.Status
func (r VPSStopVirtualMachineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VPSStopVirtualMachineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BillingGetCatalogItemListV1WithResponse request returning *BillingGetCatalogItemListV1Response
func (c *ClientWithResponses) BillingGetCatalogItemListV1WithResponse(ctx context.Context, params *BillingGetCatalogItemListV1Params, reqEditors ...RequestEditorFn) (*BillingGetCatalogItemListV1Response, error) {
	rsp, err := c.BillingGetCatalogItemListV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingGetCatalogItemListV1Response(rsp)
}

// BillingCreateNewServiceOrderV1WithBodyWithResponse request with arbitrary body returning *BillingCreateNewServiceOrderV1Response
func (c *ClientWithResponses) BillingCreateNewServiceOrderV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateNewServiceOrderV1Response, error) {
	rsp, err := c.BillingCreateNewServiceOrderV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateNewServiceOrderV1Response(rsp)
}

func (c *ClientWithResponses) BillingCreateNewServiceOrderV1WithResponse(ctx context.Context, body BillingCreateNewServiceOrderV1JSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateNewServiceOrderV1Response, error) {
	rsp, err := c.BillingCreateNewServiceOrderV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateNewServiceOrderV1Response(rsp)
}

// BillingGetPaymentMethodListV1WithResponse request returning *BillingGetPaymentMethodListV1Response
func (c *ClientWithResponses) BillingGetPaymentMethodListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BillingGetPaymentMethodListV1Response, error) {
	rsp, err := c.BillingGetPaymentMethodListV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingGetPaymentMethodListV1Response(rsp)
}

// BillingDeletePaymentMethodV1WithResponse request returning *BillingDeletePaymentMethodV1Response
func (c *ClientWithResponses) BillingDeletePaymentMethodV1WithResponse(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*BillingDeletePaymentMethodV1Response, error) {
	rsp, err := c.BillingDeletePaymentMethodV1(ctx, paymentMethodId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingDeletePaymentMethodV1Response(rsp)
}

// BillingSetDefaultPaymentMethodV1WithResponse request returning *BillingSetDefaultPaymentMethodV1Response
func (c *ClientWithResponses) BillingSetDefaultPaymentMethodV1WithResponse(ctx context.Context, paymentMethodId PaymentMethodId, reqEditors ...RequestEditorFn) (*BillingSetDefaultPaymentMethodV1Response, error) {
	rsp, err := c.BillingSetDefaultPaymentMethodV1(ctx, paymentMethodId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingSetDefaultPaymentMethodV1Response(rsp)
}

// BillingGetSubscriptionListV1WithResponse request returning *BillingGetSubscriptionListV1Response
func (c *ClientWithResponses) BillingGetSubscriptionListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BillingGetSubscriptionListV1Response, error) {
	rsp, err := c.BillingGetSubscriptionListV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingGetSubscriptionListV1Response(rsp)
}

// BillingCancelSubscriptionV1WithBodyWithResponse request with arbitrary body returning *BillingCancelSubscriptionV1Response
func (c *ClientWithResponses) BillingCancelSubscriptionV1WithBodyWithResponse(ctx context.Context, subscriptionId SubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCancelSubscriptionV1Response, error) {
	rsp, err := c.BillingCancelSubscriptionV1WithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCancelSubscriptionV1Response(rsp)
}

func (c *ClientWithResponses) BillingCancelSubscriptionV1WithResponse(ctx context.Context, subscriptionId SubscriptionId, body BillingCancelSubscriptionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCancelSubscriptionV1Response, error) {
	rsp, err := c.BillingCancelSubscriptionV1(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCancelSubscriptionV1Response(rsp)
}

// DNSGetSnapshotListV1WithResponse request returning *DNSGetSnapshotListV1Response
func (c *ClientWithResponses) DNSGetSnapshotListV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DNSGetSnapshotListV1Response, error) {
	rsp, err := c.DNSGetSnapshotListV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSGetSnapshotListV1Response(rsp)
}

// DNSGetSnapshotV1WithResponse request returning *DNSGetSnapshotV1Response
func (c *ClientWithResponses) DNSGetSnapshotV1WithResponse(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*DNSGetSnapshotV1Response, error) {
	rsp, err := c.DNSGetSnapshotV1(ctx, domain, snapshotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSGetSnapshotV1Response(rsp)
}

// DNSRestoreSnapshotV1WithResponse request returning *DNSRestoreSnapshotV1Response
func (c *ClientWithResponses) DNSRestoreSnapshotV1WithResponse(ctx context.Context, domain Domain, snapshotId SnapshotId, reqEditors ...RequestEditorFn) (*DNSRestoreSnapshotV1Response, error) {
	rsp, err := c.DNSRestoreSnapshotV1(ctx, domain, snapshotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSRestoreSnapshotV1Response(rsp)
}

// DNSDeleteZoneRecordsV1WithBodyWithResponse request with arbitrary body returning *DNSDeleteZoneRecordsV1Response
func (c *ClientWithResponses) DNSDeleteZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSDeleteZoneRecordsV1Response, error) {
	rsp, err := c.DNSDeleteZoneRecordsV1WithBody(ctx, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSDeleteZoneRecordsV1Response(rsp)
}

func (c *ClientWithResponses) DNSDeleteZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSDeleteZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSDeleteZoneRecordsV1Response, error) {
	rsp, err := c.DNSDeleteZoneRecordsV1(ctx, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSDeleteZoneRecordsV1Response(rsp)
}

// DNSGetRecordsV1WithResponse request returning *DNSGetRecordsV1Response
func (c *ClientWithResponses) DNSGetRecordsV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DNSGetRecordsV1Response, error) {
	rsp, err := c.DNSGetRecordsV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSGetRecordsV1Response(rsp)
}

// DNSUpdateZoneRecordsV1WithBodyWithResponse request with arbitrary body returning *DNSUpdateZoneRecordsV1Response
func (c *ClientWithResponses) DNSUpdateZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSUpdateZoneRecordsV1Response, error) {
	rsp, err := c.DNSUpdateZoneRecordsV1WithBody(ctx, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSUpdateZoneRecordsV1Response(rsp)
}

func (c *ClientWithResponses) DNSUpdateZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSUpdateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSUpdateZoneRecordsV1Response, error) {
	rsp, err := c.DNSUpdateZoneRecordsV1(ctx, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSUpdateZoneRecordsV1Response(rsp)
}

// DNSResetZoneRecordsV1WithBodyWithResponse request with arbitrary body returning *DNSResetZoneRecordsV1Response
func (c *ClientWithResponses) DNSResetZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSResetZoneRecordsV1Response, error) {
	rsp, err := c.DNSResetZoneRecordsV1WithBody(ctx, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSResetZoneRecordsV1Response(rsp)
}

func (c *ClientWithResponses) DNSResetZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSResetZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSResetZoneRecordsV1Response, error) {
	rsp, err := c.DNSResetZoneRecordsV1(ctx, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSResetZoneRecordsV1Response(rsp)
}

// DNSValidateZoneRecordsV1WithBodyWithResponse request with arbitrary body returning *DNSValidateZoneRecordsV1Response
func (c *ClientWithResponses) DNSValidateZoneRecordsV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DNSValidateZoneRecordsV1Response, error) {
	rsp, err := c.DNSValidateZoneRecordsV1WithBody(ctx, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSValidateZoneRecordsV1Response(rsp)
}

func (c *ClientWithResponses) DNSValidateZoneRecordsV1WithResponse(ctx context.Context, domain Domain, body DNSValidateZoneRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DNSValidateZoneRecordsV1Response, error) {
	rsp, err := c.DNSValidateZoneRecordsV1(ctx, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDNSValidateZoneRecordsV1Response(rsp)
}

// DomainsCheckDomainAvailabilityV1WithBodyWithResponse request with arbitrary body returning *DomainsCheckDomainAvailabilityV1Response
func (c *ClientWithResponses) DomainsCheckDomainAvailabilityV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCheckDomainAvailabilityV1Response, error) {
	rsp, err := c.DomainsCheckDomainAvailabilityV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCheckDomainAvailabilityV1Response(rsp)
}

func (c *ClientWithResponses) DomainsCheckDomainAvailabilityV1WithResponse(ctx context.Context, body DomainsCheckDomainAvailabilityV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCheckDomainAvailabilityV1Response, error) {
	rsp, err := c.DomainsCheckDomainAvailabilityV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCheckDomainAvailabilityV1Response(rsp)
}

// DomainsCreateForwardingDataV1WithBodyWithResponse request with arbitrary body returning *DomainsCreateForwardingDataV1Response
func (c *ClientWithResponses) DomainsCreateForwardingDataV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateForwardingDataV1Response, error) {
	rsp, err := c.DomainsCreateForwardingDataV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateForwardingDataV1Response(rsp)
}

func (c *ClientWithResponses) DomainsCreateForwardingDataV1WithResponse(ctx context.Context, body DomainsCreateForwardingDataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateForwardingDataV1Response, error) {
	rsp, err := c.DomainsCreateForwardingDataV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateForwardingDataV1Response(rsp)
}

// DomainsDeleteForwardingDataV1WithResponse request returning *DomainsDeleteForwardingDataV1Response
func (c *ClientWithResponses) DomainsDeleteForwardingDataV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsDeleteForwardingDataV1Response, error) {
	rsp, err := c.DomainsDeleteForwardingDataV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDeleteForwardingDataV1Response(rsp)
}

// DomainsGetForwardingDataV1WithResponse request returning *DomainsGetForwardingDataV1Response
func (c *ClientWithResponses) DomainsGetForwardingDataV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsGetForwardingDataV1Response, error) {
	rsp, err := c.DomainsGetForwardingDataV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsGetForwardingDataV1Response(rsp)
}

// DomainsGetDomainListV1WithResponse request returning *DomainsGetDomainListV1Response
func (c *ClientWithResponses) DomainsGetDomainListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DomainsGetDomainListV1Response, error) {
	rsp, err := c.DomainsGetDomainListV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsGetDomainListV1Response(rsp)
}

// DomainsPurchaseNewDomainV1WithBodyWithResponse request with arbitrary body returning *DomainsPurchaseNewDomainV1Response
func (c *ClientWithResponses) DomainsPurchaseNewDomainV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsPurchaseNewDomainV1Response, error) {
	rsp, err := c.DomainsPurchaseNewDomainV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPurchaseNewDomainV1Response(rsp)
}

func (c *ClientWithResponses) DomainsPurchaseNewDomainV1WithResponse(ctx context.Context, body DomainsPurchaseNewDomainV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsPurchaseNewDomainV1Response, error) {
	rsp, err := c.DomainsPurchaseNewDomainV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsPurchaseNewDomainV1Response(rsp)
}

// DomainsGetDomainV1WithResponse request returning *DomainsGetDomainV1Response
func (c *ClientWithResponses) DomainsGetDomainV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsGetDomainV1Response, error) {
	rsp, err := c.DomainsGetDomainV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsGetDomainV1Response(rsp)
}

// DomainsDisableDomainLockV1WithResponse request returning *DomainsDisableDomainLockV1Response
func (c *ClientWithResponses) DomainsDisableDomainLockV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsDisableDomainLockV1Response, error) {
	rsp, err := c.DomainsDisableDomainLockV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDisableDomainLockV1Response(rsp)
}

// DomainsEnableDomainLockV1WithResponse request returning *DomainsEnableDomainLockV1Response
func (c *ClientWithResponses) DomainsEnableDomainLockV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsEnableDomainLockV1Response, error) {
	rsp, err := c.DomainsEnableDomainLockV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsEnableDomainLockV1Response(rsp)
}

// DomainsUpdateNameserversV1WithBodyWithResponse request with arbitrary body returning *DomainsUpdateNameserversV1Response
func (c *ClientWithResponses) DomainsUpdateNameserversV1WithBodyWithResponse(ctx context.Context, domain Domain, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsUpdateNameserversV1Response, error) {
	rsp, err := c.DomainsUpdateNameserversV1WithBody(ctx, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateNameserversV1Response(rsp)
}

func (c *ClientWithResponses) DomainsUpdateNameserversV1WithResponse(ctx context.Context, domain Domain, body DomainsUpdateNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsUpdateNameserversV1Response, error) {
	rsp, err := c.DomainsUpdateNameserversV1(ctx, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsUpdateNameserversV1Response(rsp)
}

// DomainsDisablePrivacyProtectionV1WithResponse request returning *DomainsDisablePrivacyProtectionV1Response
func (c *ClientWithResponses) DomainsDisablePrivacyProtectionV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsDisablePrivacyProtectionV1Response, error) {
	rsp, err := c.DomainsDisablePrivacyProtectionV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDisablePrivacyProtectionV1Response(rsp)
}

// DomainsEnablePrivacyProtectionV1WithResponse request returning *DomainsEnablePrivacyProtectionV1Response
func (c *ClientWithResponses) DomainsEnablePrivacyProtectionV1WithResponse(ctx context.Context, domain Domain, reqEditors ...RequestEditorFn) (*DomainsEnablePrivacyProtectionV1Response, error) {
	rsp, err := c.DomainsEnablePrivacyProtectionV1(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsEnablePrivacyProtectionV1Response(rsp)
}

// DomainsGetWHOISProfileListV1WithResponse request returning *DomainsGetWHOISProfileListV1Response
func (c *ClientWithResponses) DomainsGetWHOISProfileListV1WithResponse(ctx context.Context, params *DomainsGetWHOISProfileListV1Params, reqEditors ...RequestEditorFn) (*DomainsGetWHOISProfileListV1Response, error) {
	rsp, err := c.DomainsGetWHOISProfileListV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsGetWHOISProfileListV1Response(rsp)
}

// DomainsCreateWHOISProfileV1WithBodyWithResponse request with arbitrary body returning *DomainsCreateWHOISProfileV1Response
func (c *ClientWithResponses) DomainsCreateWHOISProfileV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainsCreateWHOISProfileV1Response, error) {
	rsp, err := c.DomainsCreateWHOISProfileV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateWHOISProfileV1Response(rsp)
}

func (c *ClientWithResponses) DomainsCreateWHOISProfileV1WithResponse(ctx context.Context, body DomainsCreateWHOISProfileV1JSONRequestBody, reqEditors ...RequestEditorFn) (*DomainsCreateWHOISProfileV1Response, error) {
	rsp, err := c.DomainsCreateWHOISProfileV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsCreateWHOISProfileV1Response(rsp)
}

// DomainsDeleteWHOISProfileV1WithResponse request returning *DomainsDeleteWHOISProfileV1Response
func (c *ClientWithResponses) DomainsDeleteWHOISProfileV1WithResponse(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*DomainsDeleteWHOISProfileV1Response, error) {
	rsp, err := c.DomainsDeleteWHOISProfileV1(ctx, whoisId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsDeleteWHOISProfileV1Response(rsp)
}

// DomainsGetWHOISProfileV1WithResponse request returning *DomainsGetWHOISProfileV1Response
func (c *ClientWithResponses) DomainsGetWHOISProfileV1WithResponse(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*DomainsGetWHOISProfileV1Response, error) {
	rsp, err := c.DomainsGetWHOISProfileV1(ctx, whoisId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsGetWHOISProfileV1Response(rsp)
}

// DomainsGetWHOISProfileUsageV1WithResponse request returning *DomainsGetWHOISProfileUsageV1Response
func (c *ClientWithResponses) DomainsGetWHOISProfileUsageV1WithResponse(ctx context.Context, whoisId WhoisId, reqEditors ...RequestEditorFn) (*DomainsGetWHOISProfileUsageV1Response, error) {
	rsp, err := c.DomainsGetWHOISProfileUsageV1(ctx, whoisId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainsGetWHOISProfileUsageV1Response(rsp)
}

// VPSGetDataCentersListV1WithResponse request returning *VPSGetDataCentersListV1Response
func (c *ClientWithResponses) VPSGetDataCentersListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VPSGetDataCentersListV1Response, error) {
	rsp, err := c.VPSGetDataCentersListV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetDataCentersListV1Response(rsp)
}

// VPSGetFirewallListV1WithResponse request returning *VPSGetFirewallListV1Response
func (c *ClientWithResponses) VPSGetFirewallListV1WithResponse(ctx context.Context, params *VPSGetFirewallListV1Params, reqEditors ...RequestEditorFn) (*VPSGetFirewallListV1Response, error) {
	rsp, err := c.VPSGetFirewallListV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetFirewallListV1Response(rsp)
}

// VPSCreateNewFirewallV1WithBodyWithResponse request with arbitrary body returning *VPSCreateNewFirewallV1Response
func (c *ClientWithResponses) VPSCreateNewFirewallV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreateNewFirewallV1Response, error) {
	rsp, err := c.VPSCreateNewFirewallV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateNewFirewallV1Response(rsp)
}

func (c *ClientWithResponses) VPSCreateNewFirewallV1WithResponse(ctx context.Context, body VPSCreateNewFirewallV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreateNewFirewallV1Response, error) {
	rsp, err := c.VPSCreateNewFirewallV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateNewFirewallV1Response(rsp)
}

// VPSDeleteFirewallV1WithResponse request returning *VPSDeleteFirewallV1Response
func (c *ClientWithResponses) VPSDeleteFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*VPSDeleteFirewallV1Response, error) {
	rsp, err := c.VPSDeleteFirewallV1(ctx, firewallId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeleteFirewallV1Response(rsp)
}

// VPSGetFirewallV1WithResponse request returning *VPSGetFirewallV1Response
func (c *ClientWithResponses) VPSGetFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, reqEditors ...RequestEditorFn) (*VPSGetFirewallV1Response, error) {
	rsp, err := c.VPSGetFirewallV1(ctx, firewallId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetFirewallV1Response(rsp)
}

// VPSActivateFirewallV1WithResponse request returning *VPSActivateFirewallV1Response
func (c *ClientWithResponses) VPSActivateFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSActivateFirewallV1Response, error) {
	rsp, err := c.VPSActivateFirewallV1(ctx, firewallId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSActivateFirewallV1Response(rsp)
}

// VPSDeactivateFirewallV1WithResponse request returning *VPSDeactivateFirewallV1Response
func (c *ClientWithResponses) VPSDeactivateFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSDeactivateFirewallV1Response, error) {
	rsp, err := c.VPSDeactivateFirewallV1(ctx, firewallId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeactivateFirewallV1Response(rsp)
}

// VPSCreateFirewallRuleV1WithBodyWithResponse request with arbitrary body returning *VPSCreateFirewallRuleV1Response
func (c *ClientWithResponses) VPSCreateFirewallRuleV1WithBodyWithResponse(ctx context.Context, firewallId FirewallId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreateFirewallRuleV1Response, error) {
	rsp, err := c.VPSCreateFirewallRuleV1WithBody(ctx, firewallId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateFirewallRuleV1Response(rsp)
}

func (c *ClientWithResponses) VPSCreateFirewallRuleV1WithResponse(ctx context.Context, firewallId FirewallId, body VPSCreateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreateFirewallRuleV1Response, error) {
	rsp, err := c.VPSCreateFirewallRuleV1(ctx, firewallId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateFirewallRuleV1Response(rsp)
}

// VPSDeleteFirewallRuleV1WithResponse request returning *VPSDeleteFirewallRuleV1Response
func (c *ClientWithResponses) VPSDeleteFirewallRuleV1WithResponse(ctx context.Context, firewallId FirewallId, ruleId RuleId, reqEditors ...RequestEditorFn) (*VPSDeleteFirewallRuleV1Response, error) {
	rsp, err := c.VPSDeleteFirewallRuleV1(ctx, firewallId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeleteFirewallRuleV1Response(rsp)
}

// VPSUpdateFirewallRuleV1WithBodyWithResponse request with arbitrary body returning *VPSUpdateFirewallRuleV1Response
func (c *ClientWithResponses) VPSUpdateFirewallRuleV1WithBodyWithResponse(ctx context.Context, firewallId FirewallId, ruleId RuleId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSUpdateFirewallRuleV1Response, error) {
	rsp, err := c.VPSUpdateFirewallRuleV1WithBody(ctx, firewallId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSUpdateFirewallRuleV1Response(rsp)
}

func (c *ClientWithResponses) VPSUpdateFirewallRuleV1WithResponse(ctx context.Context, firewallId FirewallId, ruleId RuleId, body VPSUpdateFirewallRuleV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSUpdateFirewallRuleV1Response, error) {
	rsp, err := c.VPSUpdateFirewallRuleV1(ctx, firewallId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSUpdateFirewallRuleV1Response(rsp)
}

// VPSSyncFirewallV1WithResponse request returning *VPSSyncFirewallV1Response
func (c *ClientWithResponses) VPSSyncFirewallV1WithResponse(ctx context.Context, firewallId FirewallId, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSSyncFirewallV1Response, error) {
	rsp, err := c.VPSSyncFirewallV1(ctx, firewallId, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSyncFirewallV1Response(rsp)
}

// VPSGetPostInstallScriptListV1WithResponse request returning *VPSGetPostInstallScriptListV1Response
func (c *ClientWithResponses) VPSGetPostInstallScriptListV1WithResponse(ctx context.Context, params *VPSGetPostInstallScriptListV1Params, reqEditors ...RequestEditorFn) (*VPSGetPostInstallScriptListV1Response, error) {
	rsp, err := c.VPSGetPostInstallScriptListV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetPostInstallScriptListV1Response(rsp)
}

// VPSCreatePostInstallScriptV1WithBodyWithResponse request with arbitrary body returning *VPSCreatePostInstallScriptV1Response
func (c *ClientWithResponses) VPSCreatePostInstallScriptV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreatePostInstallScriptV1Response, error) {
	rsp, err := c.VPSCreatePostInstallScriptV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreatePostInstallScriptV1Response(rsp)
}

func (c *ClientWithResponses) VPSCreatePostInstallScriptV1WithResponse(ctx context.Context, body VPSCreatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreatePostInstallScriptV1Response, error) {
	rsp, err := c.VPSCreatePostInstallScriptV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreatePostInstallScriptV1Response(rsp)
}

// VPSDeleteAPostInstallScriptV1WithResponse request returning *VPSDeleteAPostInstallScriptV1Response
func (c *ClientWithResponses) VPSDeleteAPostInstallScriptV1WithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*VPSDeleteAPostInstallScriptV1Response, error) {
	rsp, err := c.VPSDeleteAPostInstallScriptV1(ctx, postInstallScriptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeleteAPostInstallScriptV1Response(rsp)
}

// VPSGetPostInstallScriptV1WithResponse request returning *VPSGetPostInstallScriptV1Response
func (c *ClientWithResponses) VPSGetPostInstallScriptV1WithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, reqEditors ...RequestEditorFn) (*VPSGetPostInstallScriptV1Response, error) {
	rsp, err := c.VPSGetPostInstallScriptV1(ctx, postInstallScriptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetPostInstallScriptV1Response(rsp)
}

// VPSUpdatePostInstallScriptV1WithBodyWithResponse request with arbitrary body returning *VPSUpdatePostInstallScriptV1Response
func (c *ClientWithResponses) VPSUpdatePostInstallScriptV1WithBodyWithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSUpdatePostInstallScriptV1Response, error) {
	rsp, err := c.VPSUpdatePostInstallScriptV1WithBody(ctx, postInstallScriptId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSUpdatePostInstallScriptV1Response(rsp)
}

func (c *ClientWithResponses) VPSUpdatePostInstallScriptV1WithResponse(ctx context.Context, postInstallScriptId PostInstallScriptId, body VPSUpdatePostInstallScriptV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSUpdatePostInstallScriptV1Response, error) {
	rsp, err := c.VPSUpdatePostInstallScriptV1(ctx, postInstallScriptId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSUpdatePostInstallScriptV1Response(rsp)
}

// VPSGetPublicKeyListV1WithResponse request returning *VPSGetPublicKeyListV1Response
func (c *ClientWithResponses) VPSGetPublicKeyListV1WithResponse(ctx context.Context, params *VPSGetPublicKeyListV1Params, reqEditors ...RequestEditorFn) (*VPSGetPublicKeyListV1Response, error) {
	rsp, err := c.VPSGetPublicKeyListV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetPublicKeyListV1Response(rsp)
}

// VPSCreateNewPublicKeyV1WithBodyWithResponse request with arbitrary body returning *VPSCreateNewPublicKeyV1Response
func (c *ClientWithResponses) VPSCreateNewPublicKeyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSCreateNewPublicKeyV1Response, error) {
	rsp, err := c.VPSCreateNewPublicKeyV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateNewPublicKeyV1Response(rsp)
}

func (c *ClientWithResponses) VPSCreateNewPublicKeyV1WithResponse(ctx context.Context, body VPSCreateNewPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSCreateNewPublicKeyV1Response, error) {
	rsp, err := c.VPSCreateNewPublicKeyV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateNewPublicKeyV1Response(rsp)
}

// VPSAttachPublicKeyV1WithBodyWithResponse request with arbitrary body returning *VPSAttachPublicKeyV1Response
func (c *ClientWithResponses) VPSAttachPublicKeyV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSAttachPublicKeyV1Response, error) {
	rsp, err := c.VPSAttachPublicKeyV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSAttachPublicKeyV1Response(rsp)
}

func (c *ClientWithResponses) VPSAttachPublicKeyV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSAttachPublicKeyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSAttachPublicKeyV1Response, error) {
	rsp, err := c.VPSAttachPublicKeyV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSAttachPublicKeyV1Response(rsp)
}

// VPSDeleteAPublicKeyV1WithResponse request returning *VPSDeleteAPublicKeyV1Response
func (c *ClientWithResponses) VPSDeleteAPublicKeyV1WithResponse(ctx context.Context, publicKeyId PublicKeyId, reqEditors ...RequestEditorFn) (*VPSDeleteAPublicKeyV1Response, error) {
	rsp, err := c.VPSDeleteAPublicKeyV1(ctx, publicKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeleteAPublicKeyV1Response(rsp)
}

// VPSGetTemplateListV1WithResponse request returning *VPSGetTemplateListV1Response
func (c *ClientWithResponses) VPSGetTemplateListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VPSGetTemplateListV1Response, error) {
	rsp, err := c.VPSGetTemplateListV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetTemplateListV1Response(rsp)
}

// VPSGetTemplateV1WithResponse request returning *VPSGetTemplateV1Response
func (c *ClientWithResponses) VPSGetTemplateV1WithResponse(ctx context.Context, templateId TemplateId, reqEditors ...RequestEditorFn) (*VPSGetTemplateV1Response, error) {
	rsp, err := c.VPSGetTemplateV1(ctx, templateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetTemplateV1Response(rsp)
}

// VPSGetVirtualMachineListV1WithResponse request returning *VPSGetVirtualMachineListV1Response
func (c *ClientWithResponses) VPSGetVirtualMachineListV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VPSGetVirtualMachineListV1Response, error) {
	rsp, err := c.VPSGetVirtualMachineListV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetVirtualMachineListV1Response(rsp)
}

// VPSPurchaseNewVirtualMachineV1WithBodyWithResponse request with arbitrary body returning *VPSPurchaseNewVirtualMachineV1Response
func (c *ClientWithResponses) VPSPurchaseNewVirtualMachineV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSPurchaseNewVirtualMachineV1Response, error) {
	rsp, err := c.VPSPurchaseNewVirtualMachineV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSPurchaseNewVirtualMachineV1Response(rsp)
}

func (c *ClientWithResponses) VPSPurchaseNewVirtualMachineV1WithResponse(ctx context.Context, body VPSPurchaseNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSPurchaseNewVirtualMachineV1Response, error) {
	rsp, err := c.VPSPurchaseNewVirtualMachineV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSPurchaseNewVirtualMachineV1Response(rsp)
}

// VPSGetVirtualMachineV1WithResponse request returning *VPSGetVirtualMachineV1Response
func (c *ClientWithResponses) VPSGetVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSGetVirtualMachineV1Response, error) {
	rsp, err := c.VPSGetVirtualMachineV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetVirtualMachineV1Response(rsp)
}

// VPSGetActionListV1WithResponse request returning *VPSGetActionListV1Response
func (c *ClientWithResponses) VPSGetActionListV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetActionListV1Params, reqEditors ...RequestEditorFn) (*VPSGetActionListV1Response, error) {
	rsp, err := c.VPSGetActionListV1(ctx, virtualMachineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetActionListV1Response(rsp)
}

// VPSGetActionV1WithResponse request returning *VPSGetActionV1Response
func (c *ClientWithResponses) VPSGetActionV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, actionId ActionId, reqEditors ...RequestEditorFn) (*VPSGetActionV1Response, error) {
	rsp, err := c.VPSGetActionV1(ctx, virtualMachineId, actionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetActionV1Response(rsp)
}

// VPSGetBackupListV1WithResponse request returning *VPSGetBackupListV1Response
func (c *ClientWithResponses) VPSGetBackupListV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetBackupListV1Params, reqEditors ...RequestEditorFn) (*VPSGetBackupListV1Response, error) {
	rsp, err := c.VPSGetBackupListV1(ctx, virtualMachineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetBackupListV1Response(rsp)
}

// VPSDeleteBackupV1WithResponse request returning *VPSDeleteBackupV1Response
func (c *ClientWithResponses) VPSDeleteBackupV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*VPSDeleteBackupV1Response, error) {
	rsp, err := c.VPSDeleteBackupV1(ctx, virtualMachineId, backupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeleteBackupV1Response(rsp)
}

// VPSRestoreBackupV1WithResponse request returning *VPSRestoreBackupV1Response
func (c *ClientWithResponses) VPSRestoreBackupV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, backupId BackupId, reqEditors ...RequestEditorFn) (*VPSRestoreBackupV1Response, error) {
	rsp, err := c.VPSRestoreBackupV1(ctx, virtualMachineId, backupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSRestoreBackupV1Response(rsp)
}

// VPSResetHostnameV1WithResponse request returning *VPSResetHostnameV1Response
func (c *ClientWithResponses) VPSResetHostnameV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSResetHostnameV1Response, error) {
	rsp, err := c.VPSResetHostnameV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSResetHostnameV1Response(rsp)
}

// VPSSetHostnameV1WithBodyWithResponse request with arbitrary body returning *VPSSetHostnameV1Response
func (c *ClientWithResponses) VPSSetHostnameV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetHostnameV1Response, error) {
	rsp, err := c.VPSSetHostnameV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetHostnameV1Response(rsp)
}

func (c *ClientWithResponses) VPSSetHostnameV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetHostnameV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetHostnameV1Response, error) {
	rsp, err := c.VPSSetHostnameV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetHostnameV1Response(rsp)
}

// VPSGetMetricsV1WithResponse request returning *VPSGetMetricsV1Response
func (c *ClientWithResponses) VPSGetMetricsV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetMetricsV1Params, reqEditors ...RequestEditorFn) (*VPSGetMetricsV1Response, error) {
	rsp, err := c.VPSGetMetricsV1(ctx, virtualMachineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetMetricsV1Response(rsp)
}

// VPSUninstallMonarxV1WithResponse request returning *VPSUninstallMonarxV1Response
func (c *ClientWithResponses) VPSUninstallMonarxV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSUninstallMonarxV1Response, error) {
	rsp, err := c.VPSUninstallMonarxV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSUninstallMonarxV1Response(rsp)
}

// VPSGetScanMetricsV1WithResponse request returning *VPSGetScanMetricsV1Response
func (c *ClientWithResponses) VPSGetScanMetricsV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSGetScanMetricsV1Response, error) {
	rsp, err := c.VPSGetScanMetricsV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetScanMetricsV1Response(rsp)
}

// VPSInstallMonarxV1WithResponse request returning *VPSInstallMonarxV1Response
func (c *ClientWithResponses) VPSInstallMonarxV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSInstallMonarxV1Response, error) {
	rsp, err := c.VPSInstallMonarxV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSInstallMonarxV1Response(rsp)
}

// VPSSetNameserversV1WithBodyWithResponse request with arbitrary body returning *VPSSetNameserversV1Response
func (c *ClientWithResponses) VPSSetNameserversV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetNameserversV1Response, error) {
	rsp, err := c.VPSSetNameserversV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetNameserversV1Response(rsp)
}

func (c *ClientWithResponses) VPSSetNameserversV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetNameserversV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetNameserversV1Response, error) {
	rsp, err := c.VPSSetNameserversV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetNameserversV1Response(rsp)
}

// VPSSetPanelPasswordV1WithBodyWithResponse request with arbitrary body returning *VPSSetPanelPasswordV1Response
func (c *ClientWithResponses) VPSSetPanelPasswordV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetPanelPasswordV1Response, error) {
	rsp, err := c.VPSSetPanelPasswordV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetPanelPasswordV1Response(rsp)
}

func (c *ClientWithResponses) VPSSetPanelPasswordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetPanelPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetPanelPasswordV1Response, error) {
	rsp, err := c.VPSSetPanelPasswordV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetPanelPasswordV1Response(rsp)
}

// VPSDeletePTRRecordV1WithResponse request returning *VPSDeletePTRRecordV1Response
func (c *ClientWithResponses) VPSDeletePTRRecordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSDeletePTRRecordV1Response, error) {
	rsp, err := c.VPSDeletePTRRecordV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeletePTRRecordV1Response(rsp)
}

// VPSCreatePTRRecordV1WithResponse request returning *VPSCreatePTRRecordV1Response
func (c *ClientWithResponses) VPSCreatePTRRecordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSCreatePTRRecordV1Response, error) {
	rsp, err := c.VPSCreatePTRRecordV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreatePTRRecordV1Response(rsp)
}

// VPSGetAttachedPublicKeysV1WithResponse request returning *VPSGetAttachedPublicKeysV1Response
func (c *ClientWithResponses) VPSGetAttachedPublicKeysV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, params *VPSGetAttachedPublicKeysV1Params, reqEditors ...RequestEditorFn) (*VPSGetAttachedPublicKeysV1Response, error) {
	rsp, err := c.VPSGetAttachedPublicKeysV1(ctx, virtualMachineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetAttachedPublicKeysV1Response(rsp)
}

// VPSStopRecoveryModeV1WithResponse request returning *VPSStopRecoveryModeV1Response
func (c *ClientWithResponses) VPSStopRecoveryModeV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSStopRecoveryModeV1Response, error) {
	rsp, err := c.VPSStopRecoveryModeV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSStopRecoveryModeV1Response(rsp)
}

// VPSStartRecoveryModeV1WithBodyWithResponse request with arbitrary body returning *VPSStartRecoveryModeV1Response
func (c *ClientWithResponses) VPSStartRecoveryModeV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSStartRecoveryModeV1Response, error) {
	rsp, err := c.VPSStartRecoveryModeV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSStartRecoveryModeV1Response(rsp)
}

func (c *ClientWithResponses) VPSStartRecoveryModeV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSStartRecoveryModeV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSStartRecoveryModeV1Response, error) {
	rsp, err := c.VPSStartRecoveryModeV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSStartRecoveryModeV1Response(rsp)
}

// VPSRecreateVirtualMachineV1WithBodyWithResponse request with arbitrary body returning *VPSRecreateVirtualMachineV1Response
func (c *ClientWithResponses) VPSRecreateVirtualMachineV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSRecreateVirtualMachineV1Response, error) {
	rsp, err := c.VPSRecreateVirtualMachineV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSRecreateVirtualMachineV1Response(rsp)
}

func (c *ClientWithResponses) VPSRecreateVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSRecreateVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSRecreateVirtualMachineV1Response, error) {
	rsp, err := c.VPSRecreateVirtualMachineV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSRecreateVirtualMachineV1Response(rsp)
}

// VPSRestartVirtualMachineV1WithResponse request returning *VPSRestartVirtualMachineV1Response
func (c *ClientWithResponses) VPSRestartVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSRestartVirtualMachineV1Response, error) {
	rsp, err := c.VPSRestartVirtualMachineV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSRestartVirtualMachineV1Response(rsp)
}

// VPSSetRootPasswordV1WithBodyWithResponse request with arbitrary body returning *VPSSetRootPasswordV1Response
func (c *ClientWithResponses) VPSSetRootPasswordV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetRootPasswordV1Response, error) {
	rsp, err := c.VPSSetRootPasswordV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetRootPasswordV1Response(rsp)
}

func (c *ClientWithResponses) VPSSetRootPasswordV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetRootPasswordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetRootPasswordV1Response, error) {
	rsp, err := c.VPSSetRootPasswordV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetRootPasswordV1Response(rsp)
}

// VPSSetupNewVirtualMachineV1WithBodyWithResponse request with arbitrary body returning *VPSSetupNewVirtualMachineV1Response
func (c *ClientWithResponses) VPSSetupNewVirtualMachineV1WithBodyWithResponse(ctx context.Context, virtualMachineId VirtualMachineId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VPSSetupNewVirtualMachineV1Response, error) {
	rsp, err := c.VPSSetupNewVirtualMachineV1WithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetupNewVirtualMachineV1Response(rsp)
}

func (c *ClientWithResponses) VPSSetupNewVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, body VPSSetupNewVirtualMachineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*VPSSetupNewVirtualMachineV1Response, error) {
	rsp, err := c.VPSSetupNewVirtualMachineV1(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSSetupNewVirtualMachineV1Response(rsp)
}

// VPSDeleteSnapshotV1WithResponse request returning *VPSDeleteSnapshotV1Response
func (c *ClientWithResponses) VPSDeleteSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSDeleteSnapshotV1Response, error) {
	rsp, err := c.VPSDeleteSnapshotV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSDeleteSnapshotV1Response(rsp)
}

// VPSGetSnapshotV1WithResponse request returning *VPSGetSnapshotV1Response
func (c *ClientWithResponses) VPSGetSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSGetSnapshotV1Response, error) {
	rsp, err := c.VPSGetSnapshotV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSGetSnapshotV1Response(rsp)
}

// VPSCreateSnapshotV1WithResponse request returning *VPSCreateSnapshotV1Response
func (c *ClientWithResponses) VPSCreateSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSCreateSnapshotV1Response, error) {
	rsp, err := c.VPSCreateSnapshotV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSCreateSnapshotV1Response(rsp)
}

// VPSRestoreSnapshotV1WithResponse request returning *VPSRestoreSnapshotV1Response
func (c *ClientWithResponses) VPSRestoreSnapshotV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSRestoreSnapshotV1Response, error) {
	rsp, err := c.VPSRestoreSnapshotV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSRestoreSnapshotV1Response(rsp)
}

// VPSStartVirtualMachineV1WithResponse request returning *VPSStartVirtualMachineV1Response
func (c *ClientWithResponses) VPSStartVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSStartVirtualMachineV1Response, error) {
	rsp, err := c.VPSStartVirtualMachineV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSStartVirtualMachineV1Response(rsp)
}

// VPSStopVirtualMachineV1WithResponse request returning *VPSStopVirtualMachineV1Response
func (c *ClientWithResponses) VPSStopVirtualMachineV1WithResponse(ctx context.Context, virtualMachineId VirtualMachineId, reqEditors ...RequestEditorFn) (*VPSStopVirtualMachineV1Response, error) {
	rsp, err := c.VPSStopVirtualMachineV1(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVPSStopVirtualMachineV1Response(rsp)
}

// ParseBillingGetCatalogItemListV1Response parses an HTTP response from a BillingGetCatalogItemListV1WithResponse call
func ParseBillingGetCatalogItemListV1Response(rsp *http.Response) (*BillingGetCatalogItemListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingGetCatalogItemListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1CatalogCatalogItemCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBillingCreateNewServiceOrderV1Response parses an HTTP response from a BillingCreateNewServiceOrderV1WithResponse call
func ParseBillingCreateNewServiceOrderV1Response(rsp *http.Response) (*BillingCreateNewServiceOrderV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingCreateNewServiceOrderV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1OrderOrderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBillingGetPaymentMethodListV1Response parses an HTTP response from a BillingGetPaymentMethodListV1WithResponse call
func ParseBillingGetPaymentMethodListV1Response(rsp *http.Response) (*BillingGetPaymentMethodListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingGetPaymentMethodListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1PaymentMethodPaymentMethodCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBillingDeletePaymentMethodV1Response parses an HTTP response from a BillingDeletePaymentMethodV1WithResponse call
func ParseBillingDeletePaymentMethodV1Response(rsp *http.Response) (*BillingDeletePaymentMethodV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingDeletePaymentMethodV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBillingSetDefaultPaymentMethodV1Response parses an HTTP response from a BillingSetDefaultPaymentMethodV1WithResponse call
func ParseBillingSetDefaultPaymentMethodV1Response(rsp *http.Response) (*BillingSetDefaultPaymentMethodV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingSetDefaultPaymentMethodV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBillingGetSubscriptionListV1Response parses an HTTP response from a BillingGetSubscriptionListV1WithResponse call
func ParseBillingGetSubscriptionListV1Response(rsp *http.Response) (*BillingGetSubscriptionListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingGetSubscriptionListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1SubscriptionSubscriptionCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBillingCancelSubscriptionV1Response parses an HTTP response from a BillingCancelSubscriptionV1WithResponse call
func ParseBillingCancelSubscriptionV1Response(rsp *http.Response) (*BillingCancelSubscriptionV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingCancelSubscriptionV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSGetSnapshotListV1Response parses an HTTP response from a DNSGetSnapshotListV1WithResponse call
func ParseDNSGetSnapshotListV1Response(rsp *http.Response) (*DNSGetSnapshotListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSGetSnapshotListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSV1SnapshotSnapshotCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSGetSnapshotV1Response parses an HTTP response from a DNSGetSnapshotV1WithResponse call
func ParseDNSGetSnapshotV1Response(rsp *http.Response) (*DNSGetSnapshotV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSGetSnapshotV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSV1SnapshotSnapshotWithContentResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSRestoreSnapshotV1Response parses an HTTP response from a DNSRestoreSnapshotV1WithResponse call
func ParseDNSRestoreSnapshotV1Response(rsp *http.Response) (*DNSRestoreSnapshotV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSRestoreSnapshotV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSDeleteZoneRecordsV1Response parses an HTTP response from a DNSDeleteZoneRecordsV1WithResponse call
func ParseDNSDeleteZoneRecordsV1Response(rsp *http.Response) (*DNSDeleteZoneRecordsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSDeleteZoneRecordsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSGetRecordsV1Response parses an HTTP response from a DNSGetRecordsV1WithResponse call
func ParseDNSGetRecordsV1Response(rsp *http.Response) (*DNSGetRecordsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSGetRecordsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSV1ZoneRecordCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSUpdateZoneRecordsV1Response parses an HTTP response from a DNSUpdateZoneRecordsV1WithResponse call
func ParseDNSUpdateZoneRecordsV1Response(rsp *http.Response) (*DNSUpdateZoneRecordsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSUpdateZoneRecordsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSResetZoneRecordsV1Response parses an HTTP response from a DNSResetZoneRecordsV1WithResponse call
func ParseDNSResetZoneRecordsV1Response(rsp *http.Response) (*DNSResetZoneRecordsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSResetZoneRecordsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDNSValidateZoneRecordsV1Response parses an HTTP response from a DNSValidateZoneRecordsV1WithResponse call
func ParseDNSValidateZoneRecordsV1Response(rsp *http.Response) (*DNSValidateZoneRecordsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DNSValidateZoneRecordsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsCheckDomainAvailabilityV1Response parses an HTTP response from a DomainsCheckDomainAvailabilityV1WithResponse call
func ParseDomainsCheckDomainAvailabilityV1Response(rsp *http.Response) (*DomainsCheckDomainAvailabilityV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsCheckDomainAvailabilityV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1AvailabilityAvailabilityCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsCreateForwardingDataV1Response parses an HTTP response from a DomainsCreateForwardingDataV1WithResponse call
func ParseDomainsCreateForwardingDataV1Response(rsp *http.Response) (*DomainsCreateForwardingDataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsCreateForwardingDataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1ForwardingForwardingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsDeleteForwardingDataV1Response parses an HTTP response from a DomainsDeleteForwardingDataV1WithResponse call
func ParseDomainsDeleteForwardingDataV1Response(rsp *http.Response) (*DomainsDeleteForwardingDataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDeleteForwardingDataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsGetForwardingDataV1Response parses an HTTP response from a DomainsGetForwardingDataV1WithResponse call
func ParseDomainsGetForwardingDataV1Response(rsp *http.Response) (*DomainsGetForwardingDataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsGetForwardingDataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1ForwardingForwardingResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsGetDomainListV1Response parses an HTTP response from a DomainsGetDomainListV1WithResponse call
func ParseDomainsGetDomainListV1Response(rsp *http.Response) (*DomainsGetDomainListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsGetDomainListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1DomainDomainCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsPurchaseNewDomainV1Response parses an HTTP response from a DomainsPurchaseNewDomainV1WithResponse call
func ParseDomainsPurchaseNewDomainV1Response(rsp *http.Response) (*DomainsPurchaseNewDomainV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsPurchaseNewDomainV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1OrderOrderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsGetDomainV1Response parses an HTTP response from a DomainsGetDomainV1WithResponse call
func ParseDomainsGetDomainV1Response(rsp *http.Response) (*DomainsGetDomainV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsGetDomainV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1DomainDomainExtendedResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsDisableDomainLockV1Response parses an HTTP response from a DomainsDisableDomainLockV1WithResponse call
func ParseDomainsDisableDomainLockV1Response(rsp *http.Response) (*DomainsDisableDomainLockV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDisableDomainLockV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsEnableDomainLockV1Response parses an HTTP response from a DomainsEnableDomainLockV1WithResponse call
func ParseDomainsEnableDomainLockV1Response(rsp *http.Response) (*DomainsEnableDomainLockV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsEnableDomainLockV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsUpdateNameserversV1Response parses an HTTP response from a DomainsUpdateNameserversV1WithResponse call
func ParseDomainsUpdateNameserversV1Response(rsp *http.Response) (*DomainsUpdateNameserversV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsUpdateNameserversV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsDisablePrivacyProtectionV1Response parses an HTTP response from a DomainsDisablePrivacyProtectionV1WithResponse call
func ParseDomainsDisablePrivacyProtectionV1Response(rsp *http.Response) (*DomainsDisablePrivacyProtectionV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDisablePrivacyProtectionV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsEnablePrivacyProtectionV1Response parses an HTTP response from a DomainsEnablePrivacyProtectionV1WithResponse call
func ParseDomainsEnablePrivacyProtectionV1Response(rsp *http.Response) (*DomainsEnablePrivacyProtectionV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsEnablePrivacyProtectionV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsGetWHOISProfileListV1Response parses an HTTP response from a DomainsGetWHOISProfileListV1WithResponse call
func ParseDomainsGetWHOISProfileListV1Response(rsp *http.Response) (*DomainsGetWHOISProfileListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsGetWHOISProfileListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1WHOISProfileCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsCreateWHOISProfileV1Response parses an HTTP response from a DomainsCreateWHOISProfileV1WithResponse call
func ParseDomainsCreateWHOISProfileV1Response(rsp *http.Response) (*DomainsCreateWHOISProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsCreateWHOISProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1WHOISProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsDeleteWHOISProfileV1Response parses an HTTP response from a DomainsDeleteWHOISProfileV1WithResponse call
func ParseDomainsDeleteWHOISProfileV1Response(rsp *http.Response) (*DomainsDeleteWHOISProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsDeleteWHOISProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsGetWHOISProfileV1Response parses an HTTP response from a DomainsGetWHOISProfileV1WithResponse call
func ParseDomainsGetWHOISProfileV1Response(rsp *http.Response) (*DomainsGetWHOISProfileV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsGetWHOISProfileV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1WHOISProfileResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDomainsGetWHOISProfileUsageV1Response parses an HTTP response from a DomainsGetWHOISProfileUsageV1WithResponse call
func ParseDomainsGetWHOISProfileUsageV1Response(rsp *http.Response) (*DomainsGetWHOISProfileUsageV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainsGetWHOISProfileUsageV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainsV1WHOISProfileUsageResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetDataCentersListV1Response parses an HTTP response from a VPSGetDataCentersListV1WithResponse call
func ParseVPSGetDataCentersListV1Response(rsp *http.Response) (*VPSGetDataCentersListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetDataCentersListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1DataCenterDataCenterCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetFirewallListV1Response parses an HTTP response from a VPSGetFirewallListV1WithResponse call
func ParseVPSGetFirewallListV1Response(rsp *http.Response) (*VPSGetFirewallListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetFirewallListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Array of [`VPS.V1.Firewall.FirewallResource`](#model/vpsv1firewallfirewallresource)
			Data *VPSV1FirewallFirewallCollection  `json:"data,omitempty"`
			Meta *CommonSchemaPaginationMetaSchema `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSCreateNewFirewallV1Response parses an HTTP response from a VPSCreateNewFirewallV1WithResponse call
func ParseVPSCreateNewFirewallV1Response(rsp *http.Response) (*VPSCreateNewFirewallV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSCreateNewFirewallV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1FirewallFirewallResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeleteFirewallV1Response parses an HTTP response from a VPSDeleteFirewallV1WithResponse call
func ParseVPSDeleteFirewallV1Response(rsp *http.Response) (*VPSDeleteFirewallV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeleteFirewallV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetFirewallV1Response parses an HTTP response from a VPSGetFirewallV1WithResponse call
func ParseVPSGetFirewallV1Response(rsp *http.Response) (*VPSGetFirewallV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetFirewallV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1FirewallFirewallResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSActivateFirewallV1Response parses an HTTP response from a VPSActivateFirewallV1WithResponse call
func ParseVPSActivateFirewallV1Response(rsp *http.Response) (*VPSActivateFirewallV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSActivateFirewallV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeactivateFirewallV1Response parses an HTTP response from a VPSDeactivateFirewallV1WithResponse call
func ParseVPSDeactivateFirewallV1Response(rsp *http.Response) (*VPSDeactivateFirewallV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeactivateFirewallV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSCreateFirewallRuleV1Response parses an HTTP response from a VPSCreateFirewallRuleV1WithResponse call
func ParseVPSCreateFirewallRuleV1Response(rsp *http.Response) (*VPSCreateFirewallRuleV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSCreateFirewallRuleV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1FirewallFirewallRuleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeleteFirewallRuleV1Response parses an HTTP response from a VPSDeleteFirewallRuleV1WithResponse call
func ParseVPSDeleteFirewallRuleV1Response(rsp *http.Response) (*VPSDeleteFirewallRuleV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeleteFirewallRuleV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSUpdateFirewallRuleV1Response parses an HTTP response from a VPSUpdateFirewallRuleV1WithResponse call
func ParseVPSUpdateFirewallRuleV1Response(rsp *http.Response) (*VPSUpdateFirewallRuleV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSUpdateFirewallRuleV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1FirewallFirewallRuleResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSSyncFirewallV1Response parses an HTTP response from a VPSSyncFirewallV1WithResponse call
func ParseVPSSyncFirewallV1Response(rsp *http.Response) (*VPSSyncFirewallV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSSyncFirewallV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetPostInstallScriptListV1Response parses an HTTP response from a VPSGetPostInstallScriptListV1WithResponse call
func ParseVPSGetPostInstallScriptListV1Response(rsp *http.Response) (*VPSGetPostInstallScriptListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetPostInstallScriptListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Array of [`VPS.V1.PostInstallScript.PostInstallScriptResource`](#model/vpsv1postinstallscriptpostinstallscriptresource)
			Data *VPSV1PostInstallScriptPostInstallScriptCollection `json:"data,omitempty"`
			Meta *CommonSchemaPaginationMetaSchema                  `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSCreatePostInstallScriptV1Response parses an HTTP response from a VPSCreatePostInstallScriptV1WithResponse call
func ParseVPSCreatePostInstallScriptV1Response(rsp *http.Response) (*VPSCreatePostInstallScriptV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSCreatePostInstallScriptV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1PostInstallScriptPostInstallScriptResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeleteAPostInstallScriptV1Response parses an HTTP response from a VPSDeleteAPostInstallScriptV1WithResponse call
func ParseVPSDeleteAPostInstallScriptV1Response(rsp *http.Response) (*VPSDeleteAPostInstallScriptV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeleteAPostInstallScriptV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetPostInstallScriptV1Response parses an HTTP response from a VPSGetPostInstallScriptV1WithResponse call
func ParseVPSGetPostInstallScriptV1Response(rsp *http.Response) (*VPSGetPostInstallScriptV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetPostInstallScriptV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1PostInstallScriptPostInstallScriptResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSUpdatePostInstallScriptV1Response parses an HTTP response from a VPSUpdatePostInstallScriptV1WithResponse call
func ParseVPSUpdatePostInstallScriptV1Response(rsp *http.Response) (*VPSUpdatePostInstallScriptV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSUpdatePostInstallScriptV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1PostInstallScriptPostInstallScriptResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetPublicKeyListV1Response parses an HTTP response from a VPSGetPublicKeyListV1WithResponse call
func ParseVPSGetPublicKeyListV1Response(rsp *http.Response) (*VPSGetPublicKeyListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetPublicKeyListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Array of [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource)
			Data *VPSV1PublicKeyPublicKeyCollection `json:"data,omitempty"`
			Meta *CommonSchemaPaginationMetaSchema  `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSCreateNewPublicKeyV1Response parses an HTTP response from a VPSCreateNewPublicKeyV1WithResponse call
func ParseVPSCreateNewPublicKeyV1Response(rsp *http.Response) (*VPSCreateNewPublicKeyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSCreateNewPublicKeyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1PublicKeyPublicKeyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSAttachPublicKeyV1Response parses an HTTP response from a VPSAttachPublicKeyV1WithResponse call
func ParseVPSAttachPublicKeyV1Response(rsp *http.Response) (*VPSAttachPublicKeyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSAttachPublicKeyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeleteAPublicKeyV1Response parses an HTTP response from a VPSDeleteAPublicKeyV1WithResponse call
func ParseVPSDeleteAPublicKeyV1Response(rsp *http.Response) (*VPSDeleteAPublicKeyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeleteAPublicKeyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetTemplateListV1Response parses an HTTP response from a VPSGetTemplateListV1WithResponse call
func ParseVPSGetTemplateListV1Response(rsp *http.Response) (*VPSGetTemplateListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetTemplateListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1TemplateTemplateCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetTemplateV1Response parses an HTTP response from a VPSGetTemplateV1WithResponse call
func ParseVPSGetTemplateV1Response(rsp *http.Response) (*VPSGetTemplateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetTemplateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1TemplateTemplateResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetVirtualMachineListV1Response parses an HTTP response from a VPSGetVirtualMachineListV1WithResponse call
func ParseVPSGetVirtualMachineListV1Response(rsp *http.Response) (*VPSGetVirtualMachineListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetVirtualMachineListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1VirtualMachineVirtualMachineCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSPurchaseNewVirtualMachineV1Response parses an HTTP response from a VPSPurchaseNewVirtualMachineV1WithResponse call
func ParseVPSPurchaseNewVirtualMachineV1Response(rsp *http.Response) (*VPSPurchaseNewVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSPurchaseNewVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingV1OrderOrderResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetVirtualMachineV1Response parses an HTTP response from a VPSGetVirtualMachineV1WithResponse call
func ParseVPSGetVirtualMachineV1Response(rsp *http.Response) (*VPSGetVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1VirtualMachineVirtualMachineResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetActionListV1Response parses an HTTP response from a VPSGetActionListV1WithResponse call
func ParseVPSGetActionListV1Response(rsp *http.Response) (*VPSGetActionListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetActionListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Array of [`VPS.V1.Action.ActionResource`](#model/vpsv1actionactionresource)
			Data *VPSV1ActionActionCollection      `json:"data,omitempty"`
			Meta *CommonSchemaPaginationMetaSchema `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetActionV1Response parses an HTTP response from a VPSGetActionV1WithResponse call
func ParseVPSGetActionV1Response(rsp *http.Response) (*VPSGetActionV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetActionV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetBackupListV1Response parses an HTTP response from a VPSGetBackupListV1WithResponse call
func ParseVPSGetBackupListV1Response(rsp *http.Response) (*VPSGetBackupListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetBackupListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Array of [`VPS.V1.Backup.BackupResource`](#model/vpsv1backupbackupresource)
			Data *VPSV1BackupBackupCollection      `json:"data,omitempty"`
			Meta *CommonSchemaPaginationMetaSchema `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeleteBackupV1Response parses an HTTP response from a VPSDeleteBackupV1WithResponse call
func ParseVPSDeleteBackupV1Response(rsp *http.Response) (*VPSDeleteBackupV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeleteBackupV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonSuccessEmptyResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSRestoreBackupV1Response parses an HTTP response from a VPSRestoreBackupV1WithResponse call
func ParseVPSRestoreBackupV1Response(rsp *http.Response) (*VPSRestoreBackupV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSRestoreBackupV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSResetHostnameV1Response parses an HTTP response from a VPSResetHostnameV1WithResponse call
func ParseVPSResetHostnameV1Response(rsp *http.Response) (*VPSResetHostnameV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSResetHostnameV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSSetHostnameV1Response parses an HTTP response from a VPSSetHostnameV1WithResponse call
func ParseVPSSetHostnameV1Response(rsp *http.Response) (*VPSSetHostnameV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSSetHostnameV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetMetricsV1Response parses an HTTP response from a VPSGetMetricsV1WithResponse call
func ParseVPSGetMetricsV1Response(rsp *http.Response) (*VPSGetMetricsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetMetricsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1MetricsMetricsCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSUninstallMonarxV1Response parses an HTTP response from a VPSUninstallMonarxV1WithResponse call
func ParseVPSUninstallMonarxV1Response(rsp *http.Response) (*VPSUninstallMonarxV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSUninstallMonarxV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetScanMetricsV1Response parses an HTTP response from a VPSGetScanMetricsV1WithResponse call
func ParseVPSGetScanMetricsV1Response(rsp *http.Response) (*VPSGetScanMetricsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetScanMetricsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1MalwareMetricsResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSInstallMonarxV1Response parses an HTTP response from a VPSInstallMonarxV1WithResponse call
func ParseVPSInstallMonarxV1Response(rsp *http.Response) (*VPSInstallMonarxV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSInstallMonarxV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSSetNameserversV1Response parses an HTTP response from a VPSSetNameserversV1WithResponse call
func ParseVPSSetNameserversV1Response(rsp *http.Response) (*VPSSetNameserversV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSSetNameserversV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSSetPanelPasswordV1Response parses an HTTP response from a VPSSetPanelPasswordV1WithResponse call
func ParseVPSSetPanelPasswordV1Response(rsp *http.Response) (*VPSSetPanelPasswordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSSetPanelPasswordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeletePTRRecordV1Response parses an HTTP response from a VPSDeletePTRRecordV1WithResponse call
func ParseVPSDeletePTRRecordV1Response(rsp *http.Response) (*VPSDeletePTRRecordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeletePTRRecordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSCreatePTRRecordV1Response parses an HTTP response from a VPSCreatePTRRecordV1WithResponse call
func ParseVPSCreatePTRRecordV1Response(rsp *http.Response) (*VPSCreatePTRRecordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSCreatePTRRecordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetAttachedPublicKeysV1Response parses an HTTP response from a VPSGetAttachedPublicKeysV1WithResponse call
func ParseVPSGetAttachedPublicKeysV1Response(rsp *http.Response) (*VPSGetAttachedPublicKeysV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetAttachedPublicKeysV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Array of [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource)
			Data *VPSV1PublicKeyPublicKeyCollection `json:"data,omitempty"`
			Meta *CommonSchemaPaginationMetaSchema  `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSStopRecoveryModeV1Response parses an HTTP response from a VPSStopRecoveryModeV1WithResponse call
func ParseVPSStopRecoveryModeV1Response(rsp *http.Response) (*VPSStopRecoveryModeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSStopRecoveryModeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSStartRecoveryModeV1Response parses an HTTP response from a VPSStartRecoveryModeV1WithResponse call
func ParseVPSStartRecoveryModeV1Response(rsp *http.Response) (*VPSStartRecoveryModeV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSStartRecoveryModeV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSRecreateVirtualMachineV1Response parses an HTTP response from a VPSRecreateVirtualMachineV1WithResponse call
func ParseVPSRecreateVirtualMachineV1Response(rsp *http.Response) (*VPSRecreateVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSRecreateVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSRestartVirtualMachineV1Response parses an HTTP response from a VPSRestartVirtualMachineV1WithResponse call
func ParseVPSRestartVirtualMachineV1Response(rsp *http.Response) (*VPSRestartVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSRestartVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSSetRootPasswordV1Response parses an HTTP response from a VPSSetRootPasswordV1WithResponse call
func ParseVPSSetRootPasswordV1Response(rsp *http.Response) (*VPSSetRootPasswordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSSetRootPasswordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSSetupNewVirtualMachineV1Response parses an HTTP response from a VPSSetupNewVirtualMachineV1WithResponse call
func ParseVPSSetupNewVirtualMachineV1Response(rsp *http.Response) (*VPSSetupNewVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSSetupNewVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1VirtualMachineVirtualMachineResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest CommonResponseUnprocessableContentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSDeleteSnapshotV1Response parses an HTTP response from a VPSDeleteSnapshotV1WithResponse call
func ParseVPSDeleteSnapshotV1Response(rsp *http.Response) (*VPSDeleteSnapshotV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSDeleteSnapshotV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSGetSnapshotV1Response parses an HTTP response from a VPSGetSnapshotV1WithResponse call
func ParseVPSGetSnapshotV1Response(rsp *http.Response) (*VPSGetSnapshotV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSGetSnapshotV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1SnapshotSnapshotResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSCreateSnapshotV1Response parses an HTTP response from a VPSCreateSnapshotV1WithResponse call
func ParseVPSCreateSnapshotV1Response(rsp *http.Response) (*VPSCreateSnapshotV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSCreateSnapshotV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSRestoreSnapshotV1Response parses an HTTP response from a VPSRestoreSnapshotV1WithResponse call
func ParseVPSRestoreSnapshotV1Response(rsp *http.Response) (*VPSRestoreSnapshotV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSRestoreSnapshotV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSStartVirtualMachineV1Response parses an HTTP response from a VPSStartVirtualMachineV1WithResponse call
func ParseVPSStartVirtualMachineV1Response(rsp *http.Response) (*VPSStartVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSStartVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVPSStopVirtualMachineV1Response parses an HTTP response from a VPSStopVirtualMachineV1WithResponse call
func ParseVPSStopVirtualMachineV1Response(rsp *http.Response) (*VPSStopVirtualMachineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VPSStopVirtualMachineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VPSV1ActionActionResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CommonResponseUnauthorizedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest CommonResponseErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
